(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7435],{6632:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/security/vault",function(){return n(7950)}])},7950:function(e,t,n){"use strict";n.r(t),n.d(t,{__N_SSG:function(){return i}});var s=n(5893),r=n(1151);function a(e){let t=Object.assign({h5:"h5",a:"a",h1:"h1",p:"p",h3:"h3",code:"code",strong:"strong",ul:"ul",li:"li",h2:"h2"},(0,r.ah)(),e.components),{Note:n}=t;return n||function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Note",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h5,{children:(0,s.jsx)(t.a,{href:"/docs/security",children:"Security"})}),"\n",(0,s.jsx)(t.h1,{children:"Vault"}),"\n",(0,s.jsxs)(t.p,{children:["The process by which secrets are stored in Vault is broken down into steps below. You can also view the ",(0,s.jsx)(t.a,{href:"/security",children:"marketing security page"})," for the same content."]}),"\n",(0,s.jsx)(t.h3,{children:"Step 1"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"npx dotenv-vault push"})," You run npx dotenv-vault push. Your request is started."]}),"\n",(0,s.jsx)(t.h3,{children:"Step 2"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Encrypted Connection"})," Your .env file is encrypted and sent securely over SSL to Dotenv's in-memory servers."]}),"\n",(0,s.jsx)(t.h3,{children:"Step 3"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Dotenv Servers"})," This encrypted payload is decrypted and briefly held in memory to complete the next steps. Afterward, the memory is flushed. Rest assured the decrypted version is never persisted to Dotenv systems."]}),"\n",(0,s.jsx)(t.h3,{children:"Step 4"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parsing"})," Your .env file is parsed line by line - in memory."]}),"\n",(0,s.jsx)(n,{children:(0,s.jsx)(t.p,{children:"There are minor differences between dotenv parsers across various languages and frameworks. So far Dotenv Vault handles 100% of these, and we continue to add test cases to cover all edge cases."})}),"\n",(0,s.jsx)(t.h3,{children:"Step 5"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Secret Extraction"})," Each key/value pair (and any comments) are extracted - in memory."]}),"\n",(0,s.jsx)(t.h3,{children:"Step 6"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Secret Division"})," The secret is divided into its separate key and value. This is by design. They will be stored in separate databases for added security. This way if an attacker somehow gained access to one database they would not be able to make sense of the data - having only half the puzzle."]}),"\n",(0,s.jsx)(t.h3,{children:"Step 7"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"AES-GCM Encryption"})," The KEY is encrypted. The VALUE is encrypted. They are encrypted with different master encryption keys. This way if an attacker somehow gained access to the VALUE decryption key they would find the data useless. They would not know if the secret belonged to Twilio or to AWS."]}),"\n",(0,s.jsx)(t.p,{children:"Encryption uses the AES-GCM algorithm. It is:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"well-studied"}),"\n",(0,s.jsx)(t.li,{children:"NIST recommended"}),"\n",(0,s.jsx)(t.li,{children:"an IETF standard"}),"\n",(0,s.jsx)(t.li,{children:"fast thanks to a dedicated instruction set"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Additionally, all master encryption keys are rotated on an unpublished schedule, further adding to the level of security."}),"\n",(0,s.jsx)(t.h3,{children:"Step 8"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Tokenization"})," The encrypted VALUE is sent to Dotenv Vault for safe storage. A token is returned as an identifier. The token is used in the next step for mapping the KEY to the VALUE for later secure-read operations."]}),"\n",(0,s.jsx)(t.p,{children:"Multiple security measures go into the Vault. They include but are not limited to:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Separate datastore from the application database"}),"\n",(0,s.jsx)(t.li,{children:"Not accessible via the internet and all external connections are prevented"}),"\n",(0,s.jsx)(t.li,{children:"Encrypted clients are required and these clients have to go through the application - which has its own additional layers of encryption"}),"\n",(0,s.jsx)(t.li,{children:"There are stricter TLS requirements for connecting to the Vault. TLS 1.0 cannot be used to connect."}),"\n",(0,s.jsx)(t.li,{children:"The secrets stored in the Vault are not just encrypted at the datastore level. They are also encrypted at each datastore entry as you saw in the prior step(s)."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{children:"Step 9"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Store Key Part with Token"})," Lastly, the encrypted KEY and token (representing the encrypted VALUE) are placed in an envelope and stored together in the application database."]}),"\n",(0,s.jsx)(t.h3,{children:"Step 10"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Success 201"})," A success message is returned to the developer."]}),"\n",(0,s.jsx)(t.h2,{id:"security-specifications",children:"Security Specifications"}),"\n",(0,s.jsx)(t.p,{children:"Here's additional specifications that went into build Dotenv Vault."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The Dotenv Vault is a separate datastore from the application database. This way if an attacker gains access to the application database they do not gain access to the vault datastore."}),"\n",(0,s.jsx)(t.li,{children:"The Dotenv Vault datastore is not accessible via the internet and all external connections are prevented. This way an attacker can not remotely access the Dotenv Vault datastore. Encrypted clients are required and these clients have to go through the application - which has its own layers of encryption."}),"\n",(0,s.jsx)(t.li,{children:"There are stricter TLS requirements for connecting to the Dotenv Vault datastore. TLS 1.0 cannot be used to connect."}),"\n",(0,s.jsx)(t.li,{children:"The secrets stored in the Dotenv Vault are not just encrypted at the datastore level. They are also encrypted at each VALUE. This way even if an attacker gains access to the datastore they could not make sense of the encrypted values."}),"\n",(0,s.jsx)(t.li,{children:"The VAULT does NOT store the KEY. It ONLY stores the VALUE. The KEY is stored in the application database and a shared pointer (in both datastores) allows them to be identified as a pair. This way an attacker must gain access to both the application database and the Dotenv Vault datastore to make sense of the values."}),"\n",(0,s.jsx)(t.li,{children:"The encryption key(s) used to encrypt the secret values are rotated on an unpublished schedule. This way an attacker might gain access to an old encryption key but not the most recent - foiling their ability to decrypt the secret values."}),"\n",(0,s.jsx)(t.li,{children:"Encryption uses AES-GCM encryption. It is a well-studied, NIST recommended, and IEFT standard algorithim."}),"\n",(0,s.jsx)(t.li,{children:"As you see, we go to great lengths to make sure your secrets are safe. Afterall, we keep our secrets here too."}),"\n"]})]})}var i=!0;t.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(a,e)})):a(e)}}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=6632)}),_N_E=e.O()}]);