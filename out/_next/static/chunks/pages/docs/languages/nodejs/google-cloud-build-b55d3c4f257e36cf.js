(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7381],{2850:function(n,s,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/languages/nodejs/google-cloud-build",function(){return e(1640)}])},5404:function(n,s,e){"use strict";e.d(s,{X:function(){return a}});var o=e(5893);function a(n){return(0,o.jsx)("p",{className:"lead mt-1",children:n.lead})}},9281:function(n,s,e){"use strict";e.d(s,{m:function(){return a}});var o=e(5893);function a(n){return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:"flex",children:[(0,o.jsx)("div",{className:"flex-grow",children:(0,o.jsxs)("h5",{children:[(0,o.jsx)("a",{href:"/docs#languages",children:"Languages"})," ",n.language?(0,o.jsxs)("span",{children:["â€º ",(0,o.jsx)("a",{href:n.url,children:n.language})]}):(0,o.jsx)("span",{})]})}),(0,o.jsx)("div",{className:"flex flex-shrink justify-end gap-2",children:n.icon})]})})}},1370:function(n,s,e){"use strict";e.d(s,{c:function(){return t}});var o=e(5893),a=e(5675),l=e.n(a);function t(n){return(0,o.jsx)("div",{className:"w-full p-7 bg-zinc-100 dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 rounded-md",children:(0,o.jsxs)("div",{className:"border border-zinc-300 dark:border-zinc-800 text-zinc-100 text-sm subpixel-antialiased rounded-lg leading-normal overflow-hidden shadow-lg",children:[(0,o.jsx)("div",{className:"p-0 bg-zinc-200 dark:bg-black border-b border-zinc-300 dark:border-zinc-800",children:(0,o.jsxs)("div",{className:"flex py-1 px-2",children:[(0,o.jsxs)("div",{className:"flex items-center space-x-1.5",children:[(0,o.jsx)("span",{className:"h-2 w-2 bg-red-500/70 dark:bg-red-500/30 rounded-full"}),(0,o.jsx)("span",{className:"h-2 w-2 bg-orange-300/70 dark:bg-orange-300/30 rounded-full"}),(0,o.jsx)("span",{className:"h-2 w-2 bg-green-500/70 dark:bg-green-500/30 rounded-full"})]}),(0,o.jsx)("div",{className:"text-right w-full text-zinc-400 text-xs",children:n.www})]})}),(0,o.jsx)("div",{className:"p-0",children:(0,o.jsx)("a",{href:n.url,target:"_blank",rel:"noreferrer",className:"hover:brightness-105",children:(0,o.jsx)(l(),{src:n.url,width:"0",height:"0",alt:"",className:"p-0 m-0 w-full",unoptimized:!0})})})]})})}},3474:function(n,s,e){"use strict";e.d(s,{$:function(){return a}});var o=e(5893);function a(n){return(0,o.jsx)("svg",{viewBox:"0 0 24 24",fill:"currentColor","aria-hidden":"true",...n,children:(0,o.jsx)("path",{d:"M12.19 2.38a9.344 9.344 0 0 0-9.234 6.893c.053-.02-.055.013 0 0-3.875 2.551-3.922 8.11-.247 10.941l.006-.007-.007.03a6.717 6.717 0 0 0 4.077 1.356h5.173l.03.03h5.192c6.687.053 9.376-8.605 3.835-12.35a9.365 9.365 0 0 0-2.821-4.552l-.043.043.006-.05A9.344 9.344 0 0 0 12.19 2.38zm-.358 4.146c1.244-.04 2.518.368 3.486 1.15a5.186 5.186 0 0 1 1.862 4.078v.518c3.53-.07 3.53 5.262 0 5.193h-5.193l-.008.009v-.04H6.785a2.59 2.59 0 0 1-1.067-.23h.001a2.597 2.597 0 1 1 3.437-3.437l3.013-3.012A6.747 6.747 0 0 0 8.11 8.24c.018-.01.04-.026.054-.023a5.186 5.186 0 0 1 3.67-1.69z"})})}},9183:function(n,s,e){"use strict";e.d(s,{q:function(){return a}});var o=e(5893);function a(n){return(0,o.jsx)("svg",{fill:"currentColor",viewBox:"0 0 24 24",...n,children:(0,o.jsx)("path",{d:"M11.998,24c-0.321,0-0.641-0.084-0.922-0.247l-2.936-1.737c-0.438-0.245-0.224-0.332-0.08-0.383 c0.585-0.203,0.703-0.25,1.328-0.604c0.065-0.037,0.151-0.023,0.218,0.017l2.256,1.339c0.082,0.045,0.197,0.045,0.272,0l8.795-5.076 c0.082-0.047,0.134-0.141,0.134-0.238V6.921c0-0.099-0.053-0.192-0.137-0.242l-8.791-5.072c-0.081-0.047-0.189-0.047-0.271,0 L3.075,6.68C2.99,6.729,2.936,6.825,2.936,6.921v10.15c0,0.097,0.054,0.189,0.139,0.235l2.409,1.392 c1.307,0.654,2.108-0.116,2.108-0.89V7.787c0-0.142,0.114-0.253,0.256-0.253h1.115c0.139,0,0.255,0.112,0.255,0.253v10.021 c0,1.745-0.95,2.745-2.604,2.745c-0.508,0-0.909,0-2.026-0.551L2.28,18.675c-0.57-0.329-0.922-0.945-0.922-1.604V6.921 c0-0.659,0.353-1.275,0.922-1.603l8.795-5.082c0.557-0.315,1.296-0.315,1.848,0l8.794,5.082c0.57,0.329,0.924,0.944,0.924,1.603 v10.15c0,0.659-0.354,1.273-0.924,1.604l-8.794,5.078C12.643,23.916,12.324,24,11.998,24z M19.099,13.993 c0-1.9-1.284-2.406-3.987-2.763c-2.731-0.361-3.009-0.548-3.009-1.187c0-0.528,0.235-1.233,2.258-1.233 c1.807,0,2.473,0.389,2.747,1.607c0.024,0.115,0.129,0.199,0.247,0.199h1.141c0.071,0,0.138-0.031,0.186-0.081 c0.048-0.054,0.074-0.123,0.067-0.196c-0.177-2.098-1.571-3.076-4.388-3.076c-2.508,0-4.004,1.058-4.004,2.833 c0,1.925,1.488,2.457,3.895,2.695c2.88,0.282,3.103,0.703,3.103,1.269c0,0.983-0.789,1.402-2.642,1.402 c-2.327,0-2.839-0.584-3.011-1.742c-0.02-0.124-0.126-0.215-0.253-0.215h-1.137c-0.141,0-0.254,0.112-0.254,0.253 c0,1.482,0.806,3.248,4.655,3.248C17.501,17.007,19.099,15.91,19.099,13.993z"})})}},1640:function(n,s,e){"use strict";e.r(s),e.d(s,{__N_SSG:function(){return h}});var o=e(5893),a=e(1151),l=e(5404),t=e(9281),r=e(1370),i=e(1490),c=e(3474),p=e(9183);function d(n){let s=Object.assign({h1:"h1",p:"p",h2:"h2",a:"a",code:"code",pre:"pre"},(0,a.ah)(),n.components),{Note:e}=s;return e||function(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Note",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.m,{language:"Node.js",url:"/docs/languages/nodejs",icon:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(p.q,{className:"h-9 w-9 text-[#339933]"}),(0,o.jsx)(c.$,{className:"h-9 w-9 text-[#4285F4]"})]})}),"\n",(0,o.jsx)(s.h1,{children:"CI/CD in Node.js with Google Cloud Build"}),"\n",(0,o.jsx)(l.X,{lead:"Run Node.js CI/CD in Google Cloud Build with an encrypted .env.vault file"}),"\n",(0,o.jsx)(e,{children:(0,o.jsxs)(s.p,{children:["Find a complete ",(0,o.jsx)("a",{href:"https://github.com/dotenv-org/examples/tree/master/nodejs/google-cloud-build",children:"code example on GitHub"})," for this guide."]})}),"\n",(0,o.jsx)(s.h2,{id:"initial-setup",children:"Initial setup"}),"\n",(0,o.jsxs)(s.p,{children:["Install the ",(0,o.jsxs)(s.a,{href:"https://cloud.google.com/sdk/docs/install",children:[(0,o.jsx)(s.code,{children:"gcloud"})," cli"]}),"."]}),"\n",(0,o.jsx)(s.pre,{code:"brew install --cask google-cloud-sdk\n",children:(0,o.jsx)(s.code,{children:"brew install --cask google-cloud-sdk\n"})}),"\n",(0,o.jsx)(s.p,{children:"Log in to gcloud."}),"\n",(0,o.jsx)(s.pre,{code:"gcloud auth login\n",children:(0,o.jsx)(s.code,{children:"gcloud auth login\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Set your project. You can look this up on the ",(0,o.jsx)(s.a,{href:"https://console.cloud.google.com/",children:"Google Cloud Dashboard"}),"."]}),"\n",(0,o.jsx)(s.pre,{code:"gcloud config set project PROJECT_ID\n",children:(0,o.jsx)(s.code,{children:"gcloud config set project PROJECT_ID\n"})}),"\n",(0,o.jsx)(s.p,{children:"Initialize your project with Google Cloud."}),"\n",(0,o.jsx)(s.pre,{code:"gcloud init && git config credential.helper gcloud.sh\n",children:(0,o.jsx)(s.code,{children:"gcloud init && git config credential.helper gcloud.sh\n"})}),"\n",(0,o.jsx)(s.p,{children:"Create a repo."}),"\n",(0,o.jsx)(s.pre,{code:"gcloud source repos create hello-gcloud\n",children:(0,o.jsx)(s.code,{children:"gcloud source repos create hello-gcloud\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Create a ",(0,o.jsx)(s.code,{children:"build.js"})," file. It's a very simple build script that outputs 'Hello World'."]}),"\n",(0,o.jsx)(s.pre,{language:"js",code:"// build.js\nconsole.log(`Hello ${process.env.HELLO}`)\n",children:(0,o.jsx)(s.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// build.js</span></span>\n<span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Hello </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">HELLO</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"build.js"}),"\n",(0,o.jsxs)(s.p,{children:["Create a ",(0,o.jsx)(s.code,{children:"package.json"})," file."]}),"\n",(0,o.jsx)(s.pre,{language:"json",code:'{\n  "scripts": {\n    "build": "node build.js"\n  }\n}\n',children:(0,o.jsx)(s.code,{className:"language-json",children:'<span><span style="color: var(--shiki-color-text)">{</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;scripts&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;build&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;node build.js&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'}),title:"package.json"}),"\n",(0,o.jsxs)(s.p,{children:["Create a ",(0,o.jsx)(s.code,{children:"cloudbuild.yml"})," file."]}),"\n",(0,o.jsx)(s.pre,{language:"yaml",code:"# cloudbuild.yml\nsteps:\n- name: node\n  entrypoint: npm\n  args: ['install']\n- name: node\n  entrypoint: npm\n  env:\n    - 'DOTENV_KEY=${_DOTENV_KEY}'\n  args: ['run', 'build']\n",children:(0,o.jsx)(s.code,{className:"language-yaml",children:'<span><span style="color: var(--shiki-token-comment)"># cloudbuild.yml</span></span>\n<span><span style="color: var(--shiki-token-keyword)">steps</span><span style="color: var(--shiki-token-keyword)">:</span></span>\n<span><span style="color: var(--shiki-color-text)">- </span><span style="color: var(--shiki-token-keyword)">name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">node</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">entrypoint</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">npm</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">args</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;install&#39;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">- </span><span style="color: var(--shiki-token-keyword)">name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">node</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">entrypoint</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">npm</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">env</span><span style="color: var(--shiki-token-keyword)">:</span></span>\n<span><span style="color: var(--shiki-color-text)">    - </span><span style="color: var(--shiki-token-string-expression)">&#39;DOTENV_KEY=${_DOTENV_KEY}&#39;</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">args</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;run&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;build&#39;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>'}),title:"cloudbuild.yml"}),"\n",(0,o.jsx)(s.p,{children:"Commit that to code and push to Google Cloud."}),"\n",(0,o.jsx)(s.pre,{code:"git push google\n",children:(0,o.jsx)(s.code,{children:"git push google\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Once pushed, the Google Cloud Build build will say ",(0,o.jsx)(s.code,{children:"'Hello undefined'"})," as it doesn't have a way to access the environment variable yet. Let's do that next."]}),"\n",(0,o.jsx)(e,{children:(0,o.jsx)(s.p,{children:"There were more steps to fully connect up Google Cloud Build that we did not discuss above. It's a bit of a mess to be honest. If you can we would recommend GitHub Actions over it. But once you get Google Cloud Build going it runs quite well."})}),"\n",(0,o.jsx)(s.h2,{id:"install-dotenv",children:"Install dotenv"}),"\n",(0,o.jsxs)(s.p,{children:["Install ",(0,o.jsx)(s.a,{href:"https://github.com/motdotla/dotenv",children:(0,o.jsx)(s.code,{children:"dotenv"})}),"."]}),"\n",(0,o.jsx)(s.pre,{language:"shell",code:"npm install dotenv --save # Requires dotenv >= 16.1.0\n",children:(0,o.jsx)(s.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">npm install dotenv --save </span><span style="color: var(--shiki-token-comment)"># Requires dotenv &gt;= 16.1.0</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(s.p,{children:["Create a ",(0,o.jsx)(s.code,{children:".env"})," file in the root of your project."]}),"\n",(0,o.jsx)(s.pre,{language:"shell",code:'# .env\nHELLO="World"\n',children:(0,o.jsx)(s.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-token-comment)"># .env</span></span>\n<span><span style="color: var(--shiki-color-text)">HELLO=</span><span style="color: var(--shiki-token-string-expression)">&quot;World&quot;</span></span>\n<span></span>'}),title:".env"}),"\n",(0,o.jsx)(s.p,{children:"As early as possible in your application, import and configure dotenv."}),"\n",(0,o.jsx)(s.pre,{language:"js",code:"// build.js\nrequire('dotenv').config()\nconsole.log(process.env) // remove this after you've confirmed it is working\n\nconsole.log(`Hello ${process.env.HELLO}`)\n",children:(0,o.jsx)(s.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// build.js</span></span>\n<span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;dotenv&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.config</span><span style="color: var(--shiki-color-text)">()</span></span>\n<span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.env) </span><span style="color: var(--shiki-token-comment)">// remove this after you&#39;ve confirmed it is working</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Hello </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">HELLO</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"build.js"}),"\n",(0,o.jsx)(s.p,{children:"Try running it locally."}),"\n",(0,o.jsx)(s.pre,{language:"shell",code:"node build.js\n{\n  ...\n  HELLO: 'World'\n}\nHello World\n",children:(0,o.jsx)(s.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">node build.js</span></span>\n<span><span style="color: var(--shiki-color-text)">{</span></span>\n<span><span style="color: var(--shiki-color-text)">  ...</span></span>\n<span><span style="color: var(--shiki-color-text)">  HELLO: </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span><span style="color: var(--shiki-color-text)">Hello World</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(s.p,{children:["Perfect. ",(0,o.jsx)(s.code,{children:"process.env"})," now has the keys and values you defined in your ",(0,o.jsx)(s.code,{children:".env"})," file."]}),"\n",(0,o.jsx)(s.p,{children:"That covers local simulation of the CI. Let's solve for the real CI environment next."}),"\n",(0,o.jsx)(s.h2,{id:"build-env-vault",children:"Build .env.vault"}),"\n",(0,o.jsxs)(s.p,{children:["Push your latest ",(0,o.jsx)(s.code,{children:".env"})," file changes and edit your CI secrets. ",(0,o.jsx)(s.a,{href:"/docs/tutorials/sync",children:"Learn more about syncing"})]}),"\n",(0,o.jsx)(s.pre,{language:"shell",code:"npx dotenv-vault@latest push\nnpx dotenv-vault@latest open ci\n",children:(0,o.jsx)(s.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">npx dotenv-vault@latest push</span></span>\n<span><span style="color: var(--shiki-color-text)">npx dotenv-vault@latest open ci</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(s.p,{children:"Use the UI to configure those secrets per environment."}),"\n",(0,o.jsx)(r.c,{url:"/assets/img/docs/edit-ci-value.gif",www:"dotenv.org"}),"\n",(0,o.jsxs)(s.p,{children:["Then build your encrypted ",(0,o.jsx)(s.code,{children:".env.vault"})," file."]}),"\n",(0,o.jsx)(s.pre,{language:"shell",code:"npx dotenv-vault@latest build\n",children:(0,o.jsx)(s.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">npx dotenv-vault@latest build</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(s.p,{children:"Its contents should look something like this."}),"\n",(0,o.jsx)(s.pre,{language:"shell",code:'#/-------------------.env.vault---------------------/\n#/         cloud-agnostic vaulting standard         /\n#/   [how it works](https://dotenv.org/env-vault)   /\n#/--------------------------------------------------/\n\n# development\nDOTENV_VAULT_DEVELOPMENT="/HqNgQWsf6Oh6XB9pI/CGkdgCe6d4/vWZHgP50RRoDTzkzPQk/xOaQs="\nDOTENV_VAULT_DEVELOPMENT_VERSION=2\n\n# ci\nDOTENV_VAULT_CI="x26PuIKQ/xZ5eKrYomKngM+dO/9v1vxhwslE/zjHdg3l+H6q6PheB5GVDVIbZg=="\nDOTENV_VAULT_CI_VERSION=2\n',children:(0,o.jsx)(s.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-token-comment)">#/-------------------.env.vault---------------------/</span></span>\n<span><span style="color: var(--shiki-token-comment)">#/         cloud-agnostic vaulting standard         /</span></span>\n<span><span style="color: var(--shiki-token-comment)">#/   [how it works](https://dotenv.org/env-vault)   /</span></span>\n<span><span style="color: var(--shiki-token-comment)">#/--------------------------------------------------/</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)"># development</span></span>\n<span><span style="color: var(--shiki-color-text)">DOTENV_VAULT_DEVELOPMENT=</span><span style="color: var(--shiki-token-string-expression)">&quot;/HqNgQWsf6Oh6XB9pI/CGkdgCe6d4/vWZHgP50RRoDTzkzPQk/xOaQs=&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">DOTENV_VAULT_DEVELOPMENT_VERSION=2</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)"># ci</span></span>\n<span><span style="color: var(--shiki-color-text)">DOTENV_VAULT_CI=</span><span style="color: var(--shiki-token-string-expression)">&quot;x26PuIKQ/xZ5eKrYomKngM+dO/9v1vxhwslE/zjHdg3l+H6q6PheB5GVDVIbZg==&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">DOTENV_VAULT_CI_VERSION=2</span></span>\n<span></span>'}),title:".env.vault"}),"\n",(0,o.jsx)(s.h2,{id:"set-dotenv-key",children:"Set DOTENV_KEY"}),"\n",(0,o.jsxs)(s.p,{children:["Fetch your CI ",(0,o.jsx)(s.code,{children:"DOTENV_KEY"}),"."]}),"\n",(0,o.jsx)(s.pre,{language:"shell",code:"npx dotenv-vault@latest keys ci\n# outputs: dotenv://:key_4567@dotenv.org/vault/.env.vault?environment=ci\n",children:(0,o.jsx)(s.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">npx dotenv-vault@latest keys ci</span></span>\n<span><span style="color: var(--shiki-token-comment)"># outputs: dotenv://:key_4567@dotenv.org/vault/.env.vault?environment=ci</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(s.p,{children:["Set ",(0,o.jsx)(s.code,{children:"DOTENV_KEY"})," on Google Cloud Build."]}),"\n",(0,o.jsx)(r.c,{url:"/assets/img/docs/google-cloud-build-config-vars.gif",www:"console.cloud.google.com"}),"\n",(0,o.jsx)(s.h2,{id:"build-ci",children:"Build CI"}),"\n",(0,o.jsx)(s.p,{children:"Commit those changes safely to code and rerun the build."}),"\n",(0,o.jsxs)(s.p,{children:["That's it! On rerun, your ",(0,o.jsx)(s.code,{children:".env.vault"})," file will be decrypted and its CI secrets injected as environment variables â€“ just in time."]}),"\n",(0,o.jsx)(r.c,{url:"/assets/img/docs/google-cloud-build-logs-vault.png",www:"console.cloud.google.com"}),"\n",(0,o.jsxs)(s.p,{children:["You'll know things worked correctly when you see ",(0,o.jsx)(s.code,{children:"'Loading env from encrypted .env.vault'"})," in your logs. If a ",(0,o.jsx)(s.code,{children:"DOTENV_KEY"})," is not set (for example when developing on your local machine) it will fall back to standard ",(0,o.jsx)(s.a,{href:"https://github.com/motdotla/dotenv",children:"dotenv"})," functionality."]}),"\n",(0,o.jsx)(i.default,{})]})}var h=!0;s.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),n.components);return s?(0,o.jsx)(s,Object.assign({},n,{children:(0,o.jsx)(d,n)})):d(n)}},1490:function(n,s,e){"use strict";e.r(s),e.d(s,{__N_SSG:function(){return t}});var o=e(5893),a=e(1151);function l(n){let s=Object.assign({p:"p"},(0,a.ah)(),n.components),{Note:e}=s;return e||function(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Note",!0),(0,o.jsx)(e,{children:(0,o.jsx)(s.p,{children:"You succesfully used the new .env.vault standard to encrypt and deploy your secrets. This is much safer than scattering your secrets across multiple third-party platforms and tools. Whenever you need to add or change a secret, just rebuild your .env.vault file and redeploy."})})}var t=!0;s.default=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),n.components);return s?(0,o.jsx)(s,Object.assign({},n,{children:(0,o.jsx)(l,n)})):l(n)}}},function(n){n.O(0,[5675,9774,2888,179],function(){return n(n.s=2850)}),_N_E=n.O()}]);