(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5642],{9591:function(s,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/frameworks/express/docker-compose",function(){return o(6771)}])},9061:function(s,n,o){"use strict";o.d(n,{N:function(){return a}});var e=o(5893);function a(s){return(0,e.jsx)(e.Fragment,{children:(0,e.jsxs)("div",{className:"flex",children:[(0,e.jsx)("div",{className:"flex-grow",children:(0,e.jsxs)("h5",{children:[(0,e.jsx)("a",{href:"/docs#frameworks",children:"Frameworks"})," ",s.framework?(0,e.jsxs)("span",{children:["â€º ",(0,e.jsx)("a",{href:s.url,children:s.framework})]}):(0,e.jsx)("span",{})]})}),(0,e.jsx)("div",{className:"flex flex-shrink justify-end gap-2",children:s.icon})]})})}},5404:function(s,n,o){"use strict";o.d(n,{X:function(){return a}});var e=o(5893);function a(s){return(0,e.jsx)("p",{className:"lead mt-1",children:s.lead})}},1370:function(s,n,o){"use strict";o.d(n,{c:function(){return t}});var e=o(5893),a=o(5675),r=o.n(a);function t(s){return(0,e.jsx)("div",{className:"w-full p-7 bg-zinc-100 dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 rounded-md",children:(0,e.jsxs)("div",{className:"border border-zinc-300 dark:border-zinc-800 text-zinc-100 text-sm subpixel-antialiased rounded-lg leading-normal overflow-hidden shadow-lg",children:[(0,e.jsx)("div",{className:"p-0 bg-zinc-200 dark:bg-black border-b border-zinc-300 dark:border-zinc-800",children:(0,e.jsxs)("div",{className:"flex py-1 px-2",children:[(0,e.jsxs)("div",{className:"flex items-center space-x-1.5",children:[(0,e.jsx)("span",{className:"h-2 w-2 bg-red-500/70 dark:bg-red-500/30 rounded-full"}),(0,e.jsx)("span",{className:"h-2 w-2 bg-orange-300/70 dark:bg-orange-300/30 rounded-full"}),(0,e.jsx)("span",{className:"h-2 w-2 bg-green-500/70 dark:bg-green-500/30 rounded-full"})]}),(0,e.jsx)("div",{className:"text-right w-full text-zinc-400 text-xs",children:s.www})]})}),(0,e.jsx)("div",{className:"p-0",children:(0,e.jsx)("a",{href:s.url,target:"_blank",rel:"noreferrer",className:"hover:brightness-105",children:(0,e.jsx)(r(),{src:s.url,width:"0",height:"0",alt:"",className:"p-0 m-0 w-full",unoptimized:!0})})})]})})}},7149:function(s,n,o){"use strict";o.d(n,{x:function(){return a}});var e=o(5893);function a(s){return(0,e.jsx)("svg",{fill:"currentColor",viewBox:"0 0 24 24",...s,children:(0,e.jsx)("path",{d:"M13.983 11.078h2.119a.186.186 0 00.186-.185V9.006a.186.186 0 00-.186-.186h-2.119a.185.185 0 00-.185.185v1.888c0 .102.083.185.185.185m-2.954-5.43h2.118a.186.186 0 00.186-.186V3.574a.186.186 0 00-.186-.185h-2.118a.185.185 0 00-.185.185v1.888c0 .102.082.185.185.185m0 2.716h2.118a.187.187 0 00.186-.186V6.29a.186.186 0 00-.186-.185h-2.118a.185.185 0 00-.185.185v1.887c0 .102.082.185.185.186m-2.93 0h2.12a.186.186 0 00.184-.186V6.29a.185.185 0 00-.185-.185H8.1a.185.185 0 00-.185.185v1.887c0 .102.083.185.185.186m-2.964 0h2.119a.186.186 0 00.185-.186V6.29a.185.185 0 00-.185-.185H5.136a.186.186 0 00-.186.185v1.887c0 .102.084.185.186.186m5.893 2.715h2.118a.186.186 0 00.186-.185V9.006a.186.186 0 00-.186-.186h-2.118a.185.185 0 00-.185.185v1.888c0 .102.082.185.185.185m-2.93 0h2.12a.185.185 0 00.184-.185V9.006a.185.185 0 00-.184-.186h-2.12a.185.185 0 00-.184.185v1.888c0 .102.083.185.185.185m-2.964 0h2.119a.185.185 0 00.185-.185V9.006a.185.185 0 00-.184-.186h-2.12a.186.186 0 00-.186.186v1.887c0 .102.084.185.186.185m-2.92 0h2.12a.185.185 0 00.184-.185V9.006a.185.185 0 00-.184-.186h-2.12a.185.185 0 00-.184.185v1.888c0 .102.082.185.185.185M23.763 9.89c-.065-.051-.672-.51-1.954-.51-.338.001-.676.03-1.01.087-.248-1.7-1.653-2.53-1.716-2.566l-.344-.199-.226.327c-.284.438-.49.922-.612 1.43-.23.97-.09 1.882.403 2.661-.595.332-1.55.413-1.744.42H.751a.751.751 0 00-.75.748 11.376 11.376 0 00.692 4.062c.545 1.428 1.355 2.48 2.41 3.124 1.18.723 3.1 1.137 5.275 1.137.983.003 1.963-.086 2.93-.266a12.248 12.248 0 003.823-1.389c.98-.567 1.86-1.288 2.61-2.136 1.252-1.418 1.998-2.997 2.553-4.4h.221c1.372 0 2.215-.549 2.68-1.009.309-.293.55-.65.707-1.046l.098-.288Z"})})}},7463:function(s,n,o){"use strict";o.d(n,{u:function(){return a}});var e=o(5893);function a(s){return(0,e.jsx)("svg",{fill:"currentColor",role:"img",viewBox:"0 0 24 24",...s,children:(0,e.jsx)("path",{d:"M24 18.588a1.529 1.529 0 01-1.895-.72l-3.45-4.771-.5-.667-4.003 5.444a1.466 1.466 0 01-1.802.708l5.158-6.92-4.798-6.251a1.595 1.595 0 011.9.666l3.576 4.83 3.596-4.81a1.435 1.435 0 011.788-.668L21.708 7.9l-2.522 3.283a.666.666 0 000 .994l4.804 6.412zM.002 11.576l.42-2.075c1.154-4.103 5.858-5.81 9.094-3.27 1.895 1.489 2.368 3.597 2.275 5.973H1.116C.943 16.447 4.005 19.009 7.92 17.7a4.078 4.078 0 002.582-2.876c.207-.666.548-.78 1.174-.588a5.417 5.417 0 01-2.589 3.957 6.272 6.272 0 01-7.306-.933 6.575 6.575 0 01-1.64-3.858c0-.235-.08-.455-.134-.666A88.33 88.33 0 010 11.577zm1.127-.286h9.654c-.06-3.076-2.001-5.258-4.59-5.278-2.882-.04-4.944 2.094-5.071 5.264z"})})}},6771:function(s,n,o){"use strict";o.r(n),o.d(n,{__N_SSG:function(){return h}});var e=o(5893),a=o(1151),r=o(1370),t=o(5404),l=o(9061),i=o(7149),p=o(7463);function c(s){let n=Object.assign({h1:"h1",p:"p",h2:"h2",a:"a",pre:"pre",code:"code"},(0,a.ah)(),s.components),{Note:o}=n;return o||function(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}("Note",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(l.N,{framework:"Express.js",url:"/docs/frameworks/express",icon:(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(p.u,{className:"h-9 w-9 text-[#000000] dark:invert"}),(0,e.jsx)(i.x,{className:"h-9 w-9 text-[#2496ED]"})]})}),"\n",(0,e.jsx)(n.h1,{children:"Deploy an Express.js App with Docker Compose"}),"\n",(0,e.jsx)(t.X,{lead:"Deploy an Express.js app with an encrypted .env.vault file on Docker Compose."}),"\n",(0,e.jsx)(o,{children:(0,e.jsxs)(n.p,{children:["Find a complete ",(0,e.jsx)("a",{href:"https://github.com/dotenv-org/examples/tree/master/express/docker-compose",children:"code example on GitHub"})," for this guide."]})}),"\n",(0,e.jsx)(n.h2,{id:"initial-setup",children:"Initial setup"}),"\n",(0,e.jsxs)(n.p,{children:["Install ",(0,e.jsx)(n.a,{href:"https://github.com/expressjs/express",children:"express"}),"."]}),"\n",(0,e.jsx)(n.pre,{code:"npm install express --save\n",children:(0,e.jsx)(n.code,{children:"npm install express --save\n"})}),"\n",(0,e.jsxs)(n.p,{children:["Create an ",(0,e.jsx)(n.code,{children:"index.js"})," file with the web server code."]}),"\n",(0,e.jsx)(n.pre,{language:"js",code:"const PORT = process.env.PORT || 3000\nconst express = require('express')\nconst app = express()\n\napp.listen(PORT, () => {\n  console.log(`Running on port ${PORT}.`)\n})\n\napp.get('/', function (req, res) {\n  res.send(`Hello ${process.env.HELLO}`)\n})\n",children:(0,e.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3000</span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">express</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;express&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">express</span><span style="color: var(--shiki-color-text)">()</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.listen</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Running on port </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">.`</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">})</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Hello </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">HELLO</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">})</span></span>\n<span></span>'}),title:"index.js"}),"\n",(0,e.jsxs)(n.p,{children:["Add a ",(0,e.jsx)(n.code,{children:"Dockerfile"}),"."]}),"\n",(0,e.jsx)(n.pre,{language:"shell",code:"# Dockerfile\nFROM node:16\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\n",children:(0,e.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-token-comment)"># Dockerfile</span></span>\n<span><span style="color: var(--shiki-color-text)">FROM node:16</span></span>\n<span><span style="color: var(--shiki-color-text)">WORKDIR /usr/src/app</span></span>\n<span><span style="color: var(--shiki-color-text)">COPY package</span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)">.json ./</span></span>\n<span><span style="color: var(--shiki-color-text)">RUN npm install</span></span>\n<span><span style="color: var(--shiki-color-text)">COPY </span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">.</span></span>\n<span><span style="color: var(--shiki-color-text)">EXPOSE 3000</span></span>\n<span></span>'}),title:"Dockerfile"}),"\n",(0,e.jsxs)(n.p,{children:["Create your ",(0,e.jsx)(n.code,{children:"docker-compose.yml"})," file."]}),"\n",(0,e.jsx)(n.pre,{language:"yaml",code:"version: '3.8'\nservices:\n  web:\n    build: .\n    command: node index.js\n    ports:\n      - \"3000:3000\"\n    environment:\n      NODE_ENV: ${NODE_ENV}\n      DOTENV_KEY: ${DOTENV_KEY}\n",children:(0,e.jsx)(n.code,{className:"language-yaml",children:'<span><span style="color: var(--shiki-token-keyword)">version</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;3.8&#39;</span></span>\n<span><span style="color: var(--shiki-token-keyword)">services</span><span style="color: var(--shiki-token-keyword)">:</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">web</span><span style="color: var(--shiki-token-keyword)">:</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">build</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">.</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">command</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">node index.js</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">ports</span><span style="color: var(--shiki-token-keyword)">:</span></span>\n<span><span style="color: var(--shiki-color-text)">      - </span><span style="color: var(--shiki-token-string-expression)">&quot;3000:3000&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">environment</span><span style="color: var(--shiki-token-keyword)">:</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">NODE_ENV</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">${NODE_ENV}</span></span>\n<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">DOTENV_KEY</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">${DOTENV_KEY}</span></span>\n<span></span>'}),title:"docker-compose.yml"}),"\n",(0,e.jsxs)(n.p,{children:["Create your ",(0,e.jsx)(n.code,{children:".dockerignore"})," file."]}),"\n",(0,e.jsx)(n.pre,{language:"bash",code:".git\n.env*\n!.env.vault\n",children:(0,e.jsx)(n.code,{className:"language-bash",children:'<span><span style="color: var(--shiki-color-text)">.git</span></span>\n<span><span style="color: var(--shiki-color-text)">.env</span><span style="color: var(--shiki-token-keyword)">*</span></span>\n<span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">.env.vault</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.p,{children:"Commit all that to code and run it with Docker Compose."}),"\n",(0,e.jsx)(n.pre,{language:"shell",code:"docker-compose up --build\n",children:(0,e.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">docker-compose up --build</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(r.c,{url:"/assets/img/docs/hello-undefined.png",www:"localhost:3000"}),"\n",(0,e.jsxs)(n.p,{children:["Once running, your app will say ",(0,e.jsx)(n.code,{children:"Hello undefined"})," at ",(0,e.jsx)(n.a,{href:"http://localhost:3000",children:"localhost:3000"})," as it doesnâ€™t have a way to access the environment variable yet. Letâ€™s do that next."]}),"\n",(0,e.jsx)(n.h2,{id:"install-dotenv",children:"Install dotenv"}),"\n",(0,e.jsxs)(n.p,{children:["Install ",(0,e.jsx)(n.a,{href:"https://github.com/motdotla/dotenv",children:(0,e.jsx)(n.code,{children:"dotenv"})}),"."]}),"\n",(0,e.jsx)(n.pre,{language:"shell",code:"npm install dotenv --save # Requires dotenv >= 16.1.0\n",children:(0,e.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">npm install dotenv --save </span><span style="color: var(--shiki-token-comment)"># Requires dotenv &gt;= 16.1.0</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.p,{children:"As early as possible in your application, import and configure dotenv."}),"\n",(0,e.jsx)(n.pre,{language:"js",code:"require('dotenv').config()\nconsole.log(process.env) // remove this after you've confirmed it is working\n\nconst PORT = process.env.PORT || 3000\nconst express = require('express')\n...\n",children:(0,e.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;dotenv&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.config</span><span style="color: var(--shiki-color-text)">()</span></span>\n<span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.env) </span><span style="color: var(--shiki-token-comment)">// remove this after you&#39;ve confirmed it is working</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3000</span></span>\n<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">express</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;express&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-token-keyword)">...</span></span>\n<span></span>'}),title:"index.js"}),"\n",(0,e.jsxs)(n.p,{children:["Next, tie the ",(0,e.jsx)(n.code,{children:".env.vault"})," file to our docker-compose file."]}),"\n",(0,e.jsx)(n.h2,{id:"build-env-vault",children:"Build .env.vault"}),"\n",(0,e.jsxs)(n.p,{children:["Push your latest ",(0,e.jsx)(n.code,{children:".env"})," file changes and edit your production secrets. ",(0,e.jsx)(n.a,{href:"/docs/tutorials/sync",children:"Learn more about syncing"})]}),"\n",(0,e.jsx)(n.pre,{language:"shell",code:"npx dotenv-vault@latest push\nnpx dotenv-vault@latest open production\n",children:(0,e.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">npx dotenv-vault@latest push</span></span>\n<span><span style="color: var(--shiki-color-text)">npx dotenv-vault@latest open production</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.p,{children:"Use the UI to configure those secrets per environment."}),"\n",(0,e.jsx)(r.c,{url:"/assets/img/docs/edit-production-value.gif",www:"www.dotenv.org"}),"\n",(0,e.jsxs)(n.p,{children:["Then build your encrypted ",(0,e.jsx)(n.code,{children:".env.vault"})," file."]}),"\n",(0,e.jsx)(n.pre,{language:"shell",code:"npx dotenv-vault@latest build\n",children:(0,e.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">npx dotenv-vault@latest build</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.p,{children:"Its contents should look something like this."}),"\n",(0,e.jsx)(n.pre,{language:"shell",code:'#/-------------------.env.vault---------------------/\n#/         cloud-agnostic vaulting standard         /\n#/   [how it works](https://dotenv.org/env-vault)   /\n#/--------------------------------------------------/\n\n# development\nDOTENV_VAULT_DEVELOPMENT="/HqNgQWsf6Oh6XB9pI/CGkdgCe6d4/vWZHgP50RRoDTzkzPQk/xOaQs="\nDOTENV_VAULT_DEVELOPMENT_VERSION=2\n\n# production\nDOTENV_VAULT_PRODUCTION="x26PuIKQ/xZ5eKrYomKngM+dO/9v1vxhwslE/zjHdg3l+H6q6PheB5GVDVIbZg=="\nDOTENV_VAULT_PRODUCTION_VERSION=2\n',children:(0,e.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-token-comment)">#/-------------------.env.vault---------------------/</span></span>\n<span><span style="color: var(--shiki-token-comment)">#/         cloud-agnostic vaulting standard         /</span></span>\n<span><span style="color: var(--shiki-token-comment)">#/   [how it works](https://dotenv.org/env-vault)   /</span></span>\n<span><span style="color: var(--shiki-token-comment)">#/--------------------------------------------------/</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)"># development</span></span>\n<span><span style="color: var(--shiki-color-text)">DOTENV_VAULT_DEVELOPMENT=</span><span style="color: var(--shiki-token-string-expression)">&quot;/HqNgQWsf6Oh6XB9pI/CGkdgCe6d4/vWZHgP50RRoDTzkzPQk/xOaQs=&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">DOTENV_VAULT_DEVELOPMENT_VERSION=2</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)"># production</span></span>\n<span><span style="color: var(--shiki-color-text)">DOTENV_VAULT_PRODUCTION=</span><span style="color: var(--shiki-token-string-expression)">&quot;x26PuIKQ/xZ5eKrYomKngM+dO/9v1vxhwslE/zjHdg3l+H6q6PheB5GVDVIbZg==&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">DOTENV_VAULT_PRODUCTION_VERSION=2</span></span>\n<span></span>'}),title:".env.vault"}),"\n",(0,e.jsx)(n.h2,{id:"set-dotenv-key",children:"Set DOTENV_KEY"}),"\n",(0,e.jsxs)(n.p,{children:["Fetch your production ",(0,e.jsx)(n.code,{children:"DOTENV_KEY"}),"."]}),"\n",(0,e.jsx)(n.pre,{language:"shell",code:"npx dotenv-vault@latest keys production\n# outputs: dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=production\n",children:(0,e.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">npx dotenv-vault@latest keys production</span></span>\n<span><span style="color: var(--shiki-token-comment)"># outputs: dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=production</span></span>\n<span></span>'})}),"\n",(0,e.jsxs)(n.p,{children:["Set ",(0,e.jsx)(n.code,{children:"DOTENV_KEY"})," for Docker Compose up."]}),"\n",(0,e.jsx)(n.pre,{language:"shell",code:'NODE_ENV=production DOTENV_KEY="dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=production" docker-compose up --build\n',children:(0,e.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">NODE_ENV=production DOTENV_KEY=</span><span style="color: var(--shiki-token-string-expression)">&quot;dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=production&quot;</span><span style="color: var(--shiki-color-text)"> docker-compose up --build</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(o,{children:(0,e.jsxs)(n.p,{children:["ProTip: If docker-compose seems cached on old code it probably is. Run ",(0,e.jsx)(n.code,{children:"docker-compose build --no-cache"})," to rebuild it."]})}),"\n",(0,e.jsxs)(n.p,{children:["That's it! On up, your ",(0,e.jsx)(n.code,{children:".env.vault"})," file will be decrypted and its production secrets injected as environment variables â€“ just in time."]}),"\n",(0,e.jsx)(r.c,{url:"/assets/img/docs/hello-production.png",www:"localhost:3000"}),"\n",(0,e.jsxs)(n.p,{children:["You'll know things worked correctly when you see ",(0,e.jsx)(n.code,{children:"Loading env from encrypted .env.vault"})," in your logs. If a ",(0,e.jsx)(n.code,{children:"DOTENV_KEY"})," is not set (for example when developing on your local machine) it will fall back to standard ",(0,e.jsx)(n.a,{href:"https://github.com/motdotla/dotenv",children:"dotenv"})," functionality."]}),"\n",(0,e.jsx)(r.c,{url:"/assets/img/docs/docker-logs-vault.png",www:"DOTENV_KEY='' docker-compose up --build"})]})}var h=!0;n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),s.components);return n?(0,e.jsx)(n,Object.assign({},s,{children:(0,e.jsx)(c,s)})):c(s)}}},function(s){s.O(0,[5675,9774,2888,179],function(){return s(s.s=9591)}),_N_E=s.O()}]);