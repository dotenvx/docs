(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9691],{6304:function(module,__unused_webpack_exports,__webpack_require__){module=__webpack_require__.nmd(module),function _f(self){"use strict";let Y;try{module&&(self=module)}catch(e){}function u(o){return void 0===o||o}function aa(o){let i=Array(o);for(let s=0;s<o;s++)i[s]=v();return i}function v(){return Object.create(null)}function ba(o,i){return i.length-o.length}function x(o){return"string"==typeof o}function C(o){return"object"==typeof o}function D(o){return"function"==typeof o}function ca(o,i){var s=da;if(o&&(i&&(o=E(o,i)),this.H&&(o=E(o,this.H)),this.J&&1<o.length&&(o=E(o,this.J)),s||""===s)&&(o=o.split(s),this.filter)){i=this.filter,s=o.length;let j=[];for(let _=0,$=0;_<s;_++){let s=o[_];s&&!i[s]&&(j[$++]=s)}o=j}return o}self._factory=_f;let da=/[\p{Z}\p{S}\p{P}\p{C}]+/u,ea=/[\u0300-\u036f]/g;function fa(o,i){let s=Object.keys(o),j=s.length,_=[],$="",ee=0;for(let et=0,eo,en;et<j;et++)(en=o[eo=s[et]])?(_[ee++]=F(i?"(?!\\b)"+eo+"(\\b|_)":eo),_[ee++]=en):$+=($?"|":"")+eo;return $&&(_[ee++]=F(i?"(?!\\b)("+$+")(\\b|_)":"("+$+")"),_[ee]=""),_}function E(o,i){for(let s=0,j=i.length;s<j&&(o=o.replace(i[s],i[s+1]));s+=2);return o}function F(o){return RegExp(o,"g")}function ha(o){let i="",s="";for(let j=0,_=o.length,$;j<_;j++)($=o[j])!==s&&(i+=s=$);return i}var t,ja={encode:ia,F:!1,G:""};function ia(o){return ca.call(this,(""+o).toLowerCase(),!1)}let ka={},G={};function la(o){I(o,"add"),I(o,"append"),I(o,"search"),I(o,"update"),I(o,"remove")}function I(o,i){o[i+"Async"]=function(){let o;let s=this,j=arguments;var _=j[j.length-1];return D(_)&&(o=_,delete j[j.length-1]),_=new Promise(function(o){setTimeout(function(){s.async=!0;let _=s[i].apply(s,j);s.async=!1,o(_)})}),o?(_.then(o),this):_}}function ma(o,i,s,j){let _=o.length,$=[],ee,et,eo=0;j&&(j=[]);for(let en=_-1;0<=en;en--){let ei=o[en],el=ei.length,es=v(),er=!ee;for(let o=0;o<el;o++){let el=ei[o],eu=el.length;if(eu)for(let o=0,ei,ed;o<eu;o++)if(ed=el[o],ee){if(ee[ed]){if(!en){if(s)s--;else if($[eo++]=ed,eo===i)return $}(en||j)&&(es[ed]=1),er=!0}if(j&&(ei=(et[ed]||0)+1,et[ed]=ei,ei<_)){let o=j[ei-2]||(j[ei-2]=[]);o[o.length]=ed}}else es[ed]=1}if(j)ee||(et=es);else if(!er)return[];ee=es}if(j)for(let o=j.length-1,_,et;0<=o;o--){et=(_=j[o]).length;for(let o=0,j;o<et;o++)if(!ee[j=_[o]]){if(s)s--;else if($[eo++]=j,eo===i)return $;ee[j]=1}}return $}function na(o,i){let s=v(),j=v(),_=[];for(let i=0;i<o.length;i++)s[o[i]]=1;for(let o=0,$;o<i.length;o++){$=i[o];for(let o=0,i;o<$.length;o++)s[i=$[o]]&&!j[i]&&(j[i]=1,_[_.length]=i)}return _}function J(o){this.l=!0!==o&&o,this.cache=v(),this.h=[]}function oa(o,i,s){C(o)&&(o=o.query);let j=this.cache.get(o);return j||(j=this.search(o,i,s),this.cache.set(o,j)),j}J.prototype.set=function(o,i){if(!this.cache[o]){var s=this.h.length;for(s===this.l?delete this.cache[this.h[s-1]]:s++,--s;0<s;s--)this.h[s]=this.h[s-1];this.h[0]=o}this.cache[o]=i},J.prototype.get=function(o){let i=this.cache[o];if(this.l&&i&&(o=this.h.indexOf(o))){let i=this.h[o-1];this.h[o-1]=this.h[o],this.h[o]=i}return i};let qa={memory:{charset:"latin:extra",D:3,B:4,m:!1},performance:{D:3,B:3,s:!1,context:{depth:2,D:1}},match:{charset:"latin:extra",G:"reverse"},score:{charset:"latin:advanced",D:20,B:3,context:{depth:3,D:9}},default:{}};function ra(o,i,s,j,_,$,ee){setTimeout(function(){let et=o(s?s+"."+j:j,JSON.stringify(ee));et&&et.then?et.then(function(){i.export(o,i,s,_,$+1)}):i.export(o,i,s,_,$+1)})}function K(o,i){if(!(this instanceof K))return new K(o);if(o){x(o)?o=qa[o]:(s=o.preset)&&(o=Object.assign({},s[s],o)),s=o.charset;var s,j=o.lang;x(s)&&(-1===s.indexOf(":")&&(s+=":default"),s=G[s]),x(j)&&(j=ka[j])}else o={};let _,$,ee=o.context||{};if(this.encode=o.encode||s&&s.encode||ia,this.register=i||v(),this.D=_=o.resolution||9,this.G=i=s&&s.G||o.tokenize||"strict",this.depth="strict"===i&&ee.depth,this.l=u(ee.bidirectional),this.s=$=u(o.optimize),this.m=u(o.fastupdate),this.B=o.minlength||1,this.C=o.boost,this.map=$?aa(_):v(),this.A=_=ee.resolution||1,this.h=$?aa(_):v(),this.F=s&&s.F||o.rtl,this.H=(i=o.matcher||j&&j.H)&&fa(i,!1),this.J=(i=o.stemmer||j&&j.J)&&fa(i,!0),s=i=o.filter||j&&j.filter){s=i,j=v();for(let o=0,i=s.length;o<i;o++)j[s[o]]=1;s=j}this.filter=s,this.cache=(i=o.cache)&&new J(i)}function L(o,i,s,j,_){return s&&1<o?i+(j||0)<=o?s+(_||0):(o-1)/(i+(j||0))*(s+(_||0))+1|0:0}function M(o,i,s,j,_,$,ee){let et=ee?o.h:o.map;(!i[s]||ee&&!i[s][ee])&&(o.s&&(et=et[j]),ee?((i=i[s]||(i[s]=v()))[ee]=1,et=et[ee]||(et[ee]=v())):i[s]=1,et=et[s]||(et[s]=[]),o.s||(et=et[j]||(et[j]=[])),$&&et.includes(_)||(et[et.length]=_,o.m&&((o=o.register[_]||(o.register[_]=[]))[o.length]=et)))}function sa(o,i,s,j,_,$,ee,et){let eo=[],en=et?o.h:o.map;if(o.s||(en=ua(en,ee,et,o.l)),en){let s=0,ei=Math.min(en.length,et?o.A:o.D);for(let i=0,el=0,es,er;i<ei&&(!(es=en[i])||(o.s&&(es=ua(es,ee,et,o.l)),_&&es&&$&&((er=es.length)<=_?(_-=er,es=null):(es=es.slice(_),_=0)),!es||(eo[s++]=es,!$||!((el+=es.length)>=j))));i++);if(s)return $?ta(eo,j,0):void(i[i.length]=eo)}return!s&&eo}function ta(o,i,s){return o=1===o.length?o[0]:[].concat.apply([],o),s||o.length>i?o.slice(s,s+i):o}function ua(o,i,s,j){return o=s?(o=o[(j=j&&i>s)?i:s])&&o[j?s:i]:o[i]}function N(o,i,s,j,_){let $=0;if(o.constructor===Array){if(_)-1!==(i=o.indexOf(i))?1<o.length&&(o.splice(i,1),$++):$++;else{_=Math.min(o.length,s);for(let ee=0,et;ee<_;ee++)(et=o[ee])&&($=N(et,i,s,j,_),j||$||delete o[ee])}}else for(let ee in o)($=N(o[ee],i,s,j,_))||delete o[ee];return $}function va(o){o=o.data;var i=self._index;let s=o.args;var j=o.task;"init"===j?(j=o.options||{},o=o.factory,i=j.encode,j.cache=!1,i&&0===i.indexOf("function")&&(j.encode=Function("return "+i)()),o?(Function("return "+o)()(self),self._index=new self.FlexSearch.Index(j),delete self.FlexSearch):self._index=new K(j)):(o=o.id,i=i[j].apply(i,s),postMessage("search"===j?{id:o,msg:i}:{id:o}))}t=K.prototype,t.append=function(o,i){return this.add(o,i,!0)},t.add=function(o,i,s,j){if(i&&(o||0===o)){if(!j&&!s&&this.register[o])return this.update(o,i);if(j=(i=this.encode(i)).length){let en=v(),ei=v(),el=this.depth,es=this.D;for(let er=0;er<j;er++){let eu=i[this.F?j-1-er:er];var _=eu.length;if(eu&&_>=this.B&&(el||!ei[eu])){var $=L(es,j,er),ee="";switch(this.G){case"full":if(2<_){for($=0;$<_;$++)for(var et=_;et>$;et--)if(et-$>=this.B){var eo=L(es,j,er,_,$);M(this,ei,ee=eu.substring($,et),eo,o,s)}break}case"reverse":if(1<_){for(et=_-1;0<et;et--)(ee=eu[et]+ee).length>=this.B&&M(this,ei,ee,L(es,j,er,_,et),o,s);ee=""}case"forward":if(1<_){for(et=0;et<_;et++)(ee+=eu[et]).length>=this.B&&M(this,ei,ee,$,o,s);break}default:if(this.C&&($=Math.min($/this.C(i,eu,er)|0,es-1)),M(this,ei,eu,$,o,s),el&&1<j&&er<j-1){for(_=v(),ee=this.A,$=eu,et=Math.min(el+1,j-er),_[$]=1,eo=1;eo<et;eo++)if((eu=i[this.F?j-1-er-eo:er+eo])&&eu.length>=this.B&&!_[eu]){_[eu]=1;let i=this.l&&eu>$;M(this,en,i?$:eu,L(ee+(j/2>ee?0:1),j,er,et-1,eo-1),o,s,i?eu:$)}}}}}this.m||(this.register[o]=1)}}return this},t.search=function(o,i,s){let j,_,$;s||(!i&&C(o)?o=(s=o).query:C(i)&&(s=i));let ee=[],et,eo,en=0;if(s){o=s.query||o,i=s.limit,en=s.offset||0;var ei=s.context;eo=s.suggest}if(o&&1<(et=(o=this.encode(""+o)).length)){s=v();var el=[];for(let i=0,j=0,_;i<et;i++)if((_=o[i])&&_.length>=this.B&&!s[_]){if(!this.s&&!eo&&!this.map[_])return ee;el[j++]=_,s[_]=1}et=(o=el).length}if(!et)return ee;for(i||(i=100),ei=this.depth&&1<et&&!1!==ei,s=0,ei?(j=o[0],s=1):1<et&&o.sort(ba);s<et;s++){if($=o[s],ei?(_=sa(this,ee,eo,i,en,2===et,$,j),eo&&!1===_&&ee.length||(j=$)):_=sa(this,ee,eo,i,en,1===et,$),_)return _;if(eo&&s===et-1){if(!(el=ee.length)){if(ei){ei=0,s=-1;continue}return ee}if(1===el)return ta(ee[0],i,en)}}return ma(ee,i,en,eo)},t.contain=function(o){return!!this.register[o]},t.update=function(o,i){return this.remove(o).add(o,i)},t.remove=function(o,i){let s=this.register[o];if(s){if(this.m)for(let i=0,j;i<s.length;i++)(j=s[i]).splice(j.indexOf(o),1);else N(this.map,o,this.D,this.s),this.depth&&N(this.h,o,this.A,this.s);if(i||delete this.register[o],this.cache){i=this.cache;for(let s=0,j;s<i.h.length;s++)j=i.h[s],i.cache[j].includes(o)&&(i.h.splice(s--,1),delete i.cache[j])}}return this},t.searchCache=oa,t.export=function(o,i,s,j,_){let $,ee;switch(_||(_=0)){case 0:if($="reg",this.m)for(let o in ee=v(),this.register)ee[o]=1;else ee=this.register;break;case 1:$="cfg",ee={doc:0,opt:this.s?1:0};break;case 2:$="map",ee=this.map;break;case 3:$="ctx",ee=this.h;break;default:return}return ra(o,i||this,s,$,j,_,ee),!0},t.import=function(o,i){if(i)switch(x(i)&&(i=JSON.parse(i)),o){case"cfg":this.s=!!i.opt;break;case"reg":this.m=!1,this.register=i;break;case"map":this.map=i;break;case"ctx":this.h=i}},la(K.prototype);let wa=0;function O(o){var i;if(!(this instanceof O))return new O(o);o?D(i=o.encode)&&(o.encode=i.toString()):o={},(i=(self||window)._factory)&&(i=i.toString());let s="undefined"==typeof window&&self.exports,j=this;this.o=xa(i,s,o.worker),this.h=v(),this.o&&(s?this.o.on("message",function(o){j.h[o.id](o.msg),delete j.h[o.id]}):this.o.onmessage=function(o){o=o.data,j.h[o.id](o.msg),delete j.h[o.id]},this.o.postMessage({task:"init",factory:i,options:o}))}function P(o){O.prototype[o]=O.prototype[o+"Async"]=function(){let i;let s=this,j=[].slice.call(arguments);var _=j[j.length-1];return D(_)&&(i=_,j.splice(j.length-1,1)),_=new Promise(function(i){setTimeout(function(){s.h[++wa]=i,s.o.postMessage({task:o,id:wa,args:j})})}),i?(_.then(i),this):_}}function xa(a,b,c){let d;try{d=b?eval('new (require("worker_threads")["Worker"])("../dist/node/node.js")'):a?new Worker(URL.createObjectURL(new Blob(["onmessage="+va.toString()],{type:"text/javascript"}))):new Worker(x(c)?c:"worker/worker.js",{type:"module"})}catch(e){}return d}function Q(o){if(!(this instanceof Q))return new Q(o);var i,s=o.document||o.doc||o;this.K=[],this.h=[],this.A=[],this.register=v(),this.key=(i=s.key||s.id)&&S(i,this.A)||"id",this.m=u(o.fastupdate),this.C=(i=s.store)&&!0!==i&&[],this.store=i&&v(),this.I=(i=s.tag)&&S(i,this.A),this.l=i&&v(),this.cache=(i=o.cache)&&new J(i),o.cache=!1,this.o=o.worker,this.async=!1,i=v();let j=s.index||s.field||s;x(j)&&(j=[j]);for(let s=0,_,$;s<j.length;s++)x(_=j[s])||($=_,_=_.field),$=C($)?Object.assign({},o,$):o,this.o&&(i[_]=new O($),i[_].o||(this.o=!1)),this.o||(i[_]=new K($,this.register)),this.K[s]=S(_,this.A),this.h[s]=_;if(this.C)for(x(o=s.store)&&(o=[o]),s=0;s<o.length;s++)this.C[s]=S(o[s],this.A);this.index=i}function S(o,i){let s=o.split(":"),j=0;for(let _=0;_<s.length;_++)0<=(o=s[_]).indexOf("[]")&&(o=o.substring(0,o.length-2))&&(i[j]=!0),o&&(s[j++]=o);return j<s.length&&(s.length=j),1<j?s:s[0]}function T(o,i){if(x(i))o=o[i];else for(let s=0;o&&s<i.length;s++)o=o[i[s]];return o}function U(o,i,s,j,_){if(o=o[_],j===s.length-1)i[_]=o;else if(o){if(o.constructor===Array)for(i=i[_]=Array(o.length),_=0;_<o.length;_++)U(o,i,s,j,_);else i=i[_]||(i[_]=v()),_=s[++j],U(o,i,s,j,_)}}function V(o,i,s,j,_,$,ee,et){if(o=o[ee]){if(j===i.length-1){if(o.constructor===Array){if(s[j]){for(i=0;i<o.length;i++)_.add($,o[i],!0,!0);return}o=o.join(" ")}_.add($,o,et,!0)}else if(o.constructor===Array)for(ee=0;ee<o.length;ee++)V(o,i,s,j,_,$,ee,et);else ee=i[++j],V(o,i,s,j,_,$,ee,et)}}function ya(o,i,s,j){let _=this.l[o],$=_&&_.length-s;if($&&0<$)return($>i||s)&&(_=_.slice(s,s+i)),j&&(_=za.call(this,_)),{tag:o,result:_}}function za(o){let i=Array(o.length);for(let s=0,j;s<o.length;s++)j=o[s],i[s]={id:j,doc:this.store[j]};return i}P("add"),P("append"),P("search"),P("update"),P("remove"),t=Q.prototype,t.add=function(o,i,s){if(C(o)&&(o=T(i=o,this.key)),i&&(o||0===o)){if(!s&&this.register[o])return this.update(o,i);for(let j=0,_,$;j<this.h.length;j++)$=this.h[j],x(_=this.K[j])&&(_=[_]),V(i,_,this.A,0,this.index[$],o,_[0],s);if(this.I){let j=T(i,this.I),_=v();x(j)&&(j=[j]);for(let i=0,$,ee;i<j.length;i++)if(!_[$=j[i]]&&(_[$]=1,ee=this.l[$]||(this.l[$]=[]),!s||!ee.includes(o))&&(ee[ee.length]=o,this.m)){let i=this.register[o]||(this.register[o]=[]);i[i.length]=ee}}if(this.store&&(!s||!this.store[o])){let s;if(this.C){s=v();for(let o=0,j;o<this.C.length;o++)x(j=this.C[o])?s[j]=i[j]:U(i,s,j,0,j[0])}this.store[o]=s||i}}return this},t.append=function(o,i){return this.add(o,i,!0)},t.update=function(o,i){return this.remove(o).add(o,i)},t.remove=function(o){if(C(o)&&(o=T(o,this.key)),this.register[o]){for(var i=0;i<this.h.length&&(this.index[this.h[i]].remove(o,!this.o),!this.m);i++);if(this.I&&!this.m)for(let s in this.l){i=this.l[s];let j=i.indexOf(o);-1!==j&&(1<i.length?i.splice(j,1):delete this.l[s])}this.store&&delete this.store[o],delete this.register[o]}return this},t.search=function(o,i,s,j){s||(!i&&C(o)?(s=o,o=""):C(i)&&(s=i,i=0));let _=[],$=[],ee,et,eo,en,ei,el,es=0;if(s){if(s.constructor===Array)eo=s,s=null;else{if(o=s.query||o,eo=(ee=s.pluck)||s.index||s.field,en=s.tag,et=this.store&&s.enrich,ei="and"===s.bool,i=s.limit||i||100,el=s.offset||0,en&&(x(en)&&(en=[en]),!o)){for(let o=0,s;o<en.length;o++)(s=ya.call(this,en[o],i,el,et))&&(_[_.length]=s,es++);return es?_:[]}x(eo)&&(eo=[eo])}}eo||(eo=this.h),ei=ei&&(1<eo.length||en&&1<en.length);let er=!j&&(this.o||this.async)&&[];for(let ee=0,et,eu,ed;ee<eo.length;ee++){let ec;if(x(eu=eo[ee])||(eu=(ec=eu).field,o=ec.query||o,i=ec.limit||i),er)er[ee]=this.index[eu].searchAsync(o,i,ec||s);else{if(ed=(et=j?j[ee]:this.index[eu].search(o,i,ec||s))&&et.length,en&&ed){let o=[],s=0;ei&&(o[0]=[et]);for(let i=0,j,_;i<en.length;i++)j=en[i],(ed=(_=this.l[j])&&_.length)&&(s++,o[o.length]=ei?[_]:_);s&&(ed=(et=ei?ma(o,i||100,el||0):na(et,o)).length)}if(ed)$[es]=eu,_[es++]=et;else if(ei)return[]}}if(er){let j=this;return new Promise(function(_){Promise.all(er).then(function($){_(j.search(o,i,s,$))})})}if(!es)return[];if(ee&&(!et||!this.store))return _[0];for(let o=0,i;o<$.length;o++){if((i=_[o]).length&&et&&(i=za.call(this,i)),ee)return i;_[o]={field:$[o],result:i}}return _},t.contain=function(o){return!!this.register[o]},t.get=function(o){return this.store[o]},t.set=function(o,i){return this.store[o]=i,this},t.searchCache=oa,t.export=function(o,i,s,j,_){if(_||(_=0),j||(j=0),j<this.h.length){let s=this.h[j],$=this.index[s];i=this,setTimeout(function(){$.export(o,i,_?s:"",j,_++)||(j++,_=1,i.export(o,i,s,j,_))})}else{let i,$;switch(_){case 1:i="tag",$=this.l;break;case 2:i="store",$=this.store;break;default:return}ra(o,this,s,i,j,_,$)}},t.import=function(o,i){if(i)switch(x(i)&&(i=JSON.parse(i)),o){case"tag":this.l=i;break;case"reg":this.m=!1,this.register=i;for(let o=0,s;o<this.h.length;o++)(s=this.index[this.h[o]]).register=i,s.m=!1;break;case"store":this.store=i;break;default:o=o.split(".");let s=o[0];o=o[1],s&&o&&this.index[s].import(o,i)}},la(Q.prototype);var Ba={encode:Aa,F:!1,G:""};let Ca=[F("[\xe0\xe1\xe2\xe3\xe4\xe5]"),"a",F("[\xe8\xe9\xea\xeb]"),"e",F("[\xec\xed\xee\xef]"),"i",F("[\xf2\xf3\xf4\xf5\xf6ő]"),"o",F("[\xf9\xfa\xfb\xfcű]"),"u",F("[\xfdŷ\xff]"),"y",F("\xf1"),"n",F("[\xe7c]"),"k",F("\xdf"),"s",F(" & ")," and "];function Aa(o){var i=o=""+o;return i.normalize&&(i=i.normalize("NFD").replace(ea,"")),ca.call(this,i.toLowerCase(),!o.normalize&&Ca)}var Ea={encode:Da,F:!1,G:"strict"};let Fa=/[^a-z0-9]+/,Ga={b:"p",v:"f",w:"f",z:"s",x:"s",ß:"s",d:"t",n:"m",c:"k",g:"k",j:"k",q:"k",i:"e",y:"e",u:"o"};function Da(o){o=Aa.call(this,o).join(" ");let i=[];if(o){let s=o.split(Fa),j=s.length;for(let _=0,$,ee=0;_<j;_++)if((o=s[_])&&(!this.filter||!this.filter[o])){let s=Ga[$=o[0]]||$,j=s;for(let i=1;i<o.length;i++){$=o[i];let _=Ga[$]||$;_&&_!==j&&(s+=_,j=_)}i[ee++]=s}}return i}var Ia={encode:Ha,F:!1,G:""};let Ja=[F("ae"),"a",F("oe"),"o",F("sh"),"s",F("th"),"t",F("ph"),"f",F("pf"),"f",F("(?![aeo])h(?![aeo])"),"",F("(?!^[aeo])h(?!^[aeo])"),""];function Ha(o,i){return o&&(2<(o=Da.call(this,o).join(" ")).length&&(o=E(o,Ja)),i||(1<o.length&&(o=ha(o)),o&&(o=o.split(" ")))),o||[]}var La={encode:Ka,F:!1,G:""};let Ma=F("(?!\\b)[aeo]");function Ka(o){return o&&(1<(o=Ha.call(this,o,!0)).length&&(o=o.replace(Ma,"")),1<o.length&&(o=ha(o)),o&&(o=o.split(" "))),o||[]}G["latin:default"]=ja,G["latin:simple"]=Ba,G["latin:balance"]=Ea,G["latin:advanced"]=Ia,G["latin:extra"]=La;let W=self,Z={Index:K,Document:Q,Worker:O,registerCharset:function(o,i){G[o]=i},registerLanguage:function(o,i){ka[o]=i}};(Y=W.define)&&Y.amd?Y([],function(){return Z}):W.exports?W.exports=Z:W.FlexSearch=Z}(this)},9691:function(o,i,s){"use strict";s.r(i),s.d(i,{search:function(){return _}});let j=new(s(6304)).Document({tokenize:"full",document:{id:"url",index:"content",store:["title","pageTitle"]},context:{resolution:9,depth:2,bidirectional:!0}});for(let{url:o,sections:i}of[{url:"/docs/addons",sections:[["Add-ons",null,["Extend your dotenv-vault experience with add-ons. ","Build","GitHub Auto-build","Auto-build your encrypted .env.vault file on GitHub when an environment variable is changed\nLearn more","Notify","Slack Notifications","Notify your team on Slack when an environment variable is changed\nLearn more","Sync","AWS Parameter Store","Sync your secrets to AWS Parameter Store when an environment variable is changed\nLearn more","AWS Secrets","Sync your secrets to AWS Secrets when an environment variable is changed\nLearn more","Heroku","Sync your secrets to Heroku when an environment variable is changed\nLearn more","Vercel","Sync your secrets to Vercel when an environment variable is changed\nLearn more","Misc","VSCode Plugin","Syntax highlighting, auto-cloaking, auto-completion, in-code secret peeking, and more.\nGo to install page","External Share","Permit an external team or individual to access your project's environment variables\nLearn more"]]]},{url:"/docs/dotenv-vault",sections:[["CLI",null,["Generate your env vault for your project. Then securely sync and deploy secrets across teams, machines, and environments. ","Commands","New","Create an env vault for your project. Keep your secrets safe in it.\nRead more","Push","Push your .env file securely.\nRead more","Pull","Pull your .env file securely.\nRead more","Build","Build your localized encrypted .env.vault file for use with deploy.\nRead more","Keys","List your .env.vault decryption keys for use with deploy.\nRead more","Open","Open the UI to your env vault. Manage multiple environments.\nRead more","More commands","Login","Log in to dotenv-vault.\nRead more","Logout","Log out of dotenv-vault.\nRead more","Whoami","Display the current logged in user.\nRead more","Versions","List version history for your env vault.\nRead more","Rotatekey","Rotate a project environment's DOTENV_KEY.\nRead more","Status","Check dotenv-vault operational status.\nRead more","Help","Display help for dotenv-vault.\nRead more"]]]},{url:"/docs/features",sections:[["Features",null,["Learn about dotenv-vault's many features to manage your secrets well. ","Sync .env files","Unlimited projects","Teammates","Multiple environments","Compare environments","Encrypted deploys","CLI / Dashboard","Add-ons","VSCode extension","Personal secrets","Custom environments","Slack notifications","Access controls","Version history","External share","High availability"]]]},{url:"/docs/index",sections:[["Documentation",null,["The secrets manager for .env files – from the same people that pioneered dotenv. "]],["Getting Started","getting-started",["Benefit immediately. Run the push command to sync your .env file right now.","Languages","Node.js","Use .env.vault with Node.js\nNode.js Guides","Python","Use .env.vault with Python\nPython Guides","Ruby","Use .env.vault with Ruby\nRuby Guides","Go","Use .env.vault with Go\nGo Guides","PHP","Use .env.vault with PHP\nPHP Guides","Rust","Use .env.vault with Rust\nRust Guides"]]]},{url:"/docs/libraries",sections:[["Redirecting",null,["Click here if you are not redirected."]]]},{url:"/docs/quickstart",sections:[["Quickstart ⚡️",null,["Sync, manage, and deploy your secrets the dotenv-vault way using this quickstart guide. "]],["Initial setup","initial-setup",["Install the necessary libraries for your application in the language of your choice.","Write the application code.","Create your .env file.","Run your application.",'It worked if you see "Hello World".',"Next, sync your .env file."]],["Sync","sync",["Push and pull changes to your .env file. Begin by creating your project's env vault and authenticating against it.","Push and pull your .env file securely.","That's it! You synced our .env file. Next, configure your production secrets."]],["Manage","manage",["Open the production environment to edit the production HELLO value.","Edit the HELLO value so that your production secrets will render as Hello production.","Looking good. Next, deploy your production secrets using your encrypted .env.vault file."]],["Deploy","deploy",["Begin by building your project's encrypted .env.vault file. It securely encrypts your secrets in a cloud-agnostic payload.","Commit that safely to code.","Yes it safe AND recommended you commit the .env.vault file to code. It contains AES-256 GCM encrypted ciphers of your environment secrets - that are decrypted just-in-time using an environment DOTENV_KEY.","Fetch your production decryption key - the DOTENV_KEY - to decrypt your .env.vault file.","This will output your production DOTENV_KEY. Use that DOTENV_KEY to run your application in production mode.","You will know it is working if you see the log message Loading env from encrypted .env.vault.","That's it! The DOTENV_KEY decrypts the production contents of .env.vault and injects its secrets just-in-time to your running process."]],["Conclusion","conclusion",["Congrats! You now understand how .env.vault works. This is much safer than syncing your secrets to third-parties where they could leak. CircleiCi had a secrets breach not long ago. .env.vault protects you from breaches like that. An attacker would have to get their hands on both your DOTENV_KEY AND your codebase. That is much more difficult.","In addition, you now have a single source of truth that is easy to manage. Make a change in the UI, run the build command, and redeploy. Spend less time juggling secrets and more time coding.","All that's left to do is set your DOTENV_KEY on your production server and deploy your code.","For example on heroku it is as easy as:"]],["FAQ","faq",["What happens if DOTENV_KEY is not set?","It gracefully falls back to loading from your .env file. This is the default for development so that you can focus on editing your .env file and save the build command until you are ready to deploy those environment variables changes.","Should I commit my .env file?","No. We strongly recommend against committing your .env file to version control. It should only include environment-specific values such as database passwords or API keys. Your production database should have a different password than your development database.","Should I commit my .env.vault file?","Yes. It is safe and recommended to do so. It contains your encrypted envs, and your vault identifier.","Can I share the DOTENV_KEY?","No. It is the key that unlocks your encrypted environment variables. Be very careful who you share this key with. Do not let it leak."]]]},{url:"/docs/security",sections:[["Security",null,["Security is an evermoving target - an arms race. But that doesn't mean it should be hard to use. Good design can make complex things simple, and that is what we are after at Dotenv. ","Background","Dotenv is a security tool. It has been since it was first developed in 2013. We saw developers struggling to keep their secrets safe so we pioneered the .env file format standard. The design led to better DSX (Developer Security Experience) - which led to safer secrets for millions of developers.","Problem","What is the problem with .env files today? The world has changed. Developers manage secrets at greater scale than a decade ago. .env files are not easily shareable between machines, environments, and team members. As a result, developers often share secrets over Slack and email. It's not scaleable and fraught with security risks. For a CTO or CSO it is a risk they should not take.","Competing Solutions","The other side of the coin is not so good either. Complex security software like HashiCorp Vault is difficult to fully understand and introduces new friction, complexities, and attack vectors. Friction and complexity almost always lead to negative security events because people are lazy.","But another word for lazy in software is elegance. Developers often chose .env because it was an elegant security alternative. Elegance has a great deal of value when it comes to security because it increases the likelihood of an individual working toward security rather than against it.","So all this said, we have an elegant solution for yesteryear and new problems today. What do we do?","The .env.vault Solution","We've decided to introduce the .env.vault file format and a few supporting file formats to make syncing, encrypting, and deploying your secrets elegant and safe at modern scale.","It's an exciting development, and we hope you come on this journey with us. We remember when people were telling us the .env file was unnecesary, too simple, just put your secrets in code !, etc.","Today the .env.vault is predictably getting some of the same pushback, but we are just as confident the .env.vault file format standard will follow the same adoption trajectory as the .env file format.","Get involved early with its development and usage! Try it out, contribute to its development, and keep your secrets safer.",".env","Tried and true. For development secrets\nRead more",".env.vault","Modern encryption standard for deploying secrets just-in-time\nRead more",".env.me","Authorizes you to access a project's shared .env file\nRead more","DOTENV_KEY","The DOTENV_KEY unlocks your encrypted .env.vault secrets\nRead more","Integration Tokens","Integration tokens, also known as IT tokens, are limited access tokens\nRead more","Vault","Vault stores your secrets securely\nRead more"]]]},{url:"/partials/wellDone",sections:[]},{url:"/docs/addons/aws-parameter-store",sections:[["AWS Parameter Store",null,["Sync your secrets to AWS Parameter Store when an environment variable is changed."]],["Step 1","step-1",["Navigate to the add-ons page. Click AWS Parameter Store. Then click Connect AWS Secrets."]],["Step 2","step-2",["On the next page, generate your AWS IAM User and paste in the credentials.","Important: The AWS IAM user must have correct permissions. Below is an example. Modify for your security needs."]],["Step 3","step-3",["Lastly, set up the AWS Parameter Store config path and region.","If successful, you'll have a keys and values in AWS Parameter Store that looks like the following:","That's it! Your secrets are now synced to AWS Parameter Store and will continue to stay in sync when you modify your secrets.","Thank you for using Dotenv with AWS Parameter Store."]]]},{url:"/docs/addons/aws-secrets",sections:[["AWS Secrets",null,["Sync your secrets to AWS Secrets when an environment variable is changed."]],["Step 1","step-1",["Navigate to the add-ons page. Click AWS Secrets. Then click Connect AWS Secrets."]],["Step 2","step-2",["On the next page, generate your AWS IAM User and paste in the credentials.","Important: The AWS IAM user must have correct permissions. Below is an example. Modify for your security needs."]],["Step 3","step-3",["Lastly, set up the AWS Secrets config path and region.","That's it! Your secrets are now synced to AWS Secrets and will continue to stay in sync when you modify your secrets.","Thank you for using Dotenv with AWS Secrets."]]]},{url:"/docs/addons/external",sections:[["External Share",null,["Permit an external team or individual to access your project's environment variables. Sometimes you need to share environment variables with an external team or contractor, but you don't want to add them to your organization. Use this add-on for such a scenario. External Team support takes just a click and then sharing the infrastructure token. They will receive pull access only."]],["Step 1","step-1",["Navigate to the add-ons tab. Click External Share. Then click Add. Follow the prompts."]],["Step 2","step-2",["On the next page, you will receive a usage example. It is a curl command that looks something like this."]],["Step 3","step-3",["Run the command in your terminal. It will securely fetch the environment variables and write them to a .env file on your machine.","That's it!"]]]},{url:"/docs/addons/github",sections:[["GitHub Auto-build",null,["Auto-build encrypted .env.vault file. Generate a PR on GitHub when an environment variable is changed. It can become a chore to run npx dotenv-vault build each time you are ready to deploy new secret changes. Let GitHub do it for you with this automation add-on."]],["Step 1","step-1",["Navigate to the add-ons tab. Click GitHub. Then click Add and follow the prompts."]],["Step 2","step-2",["You will be redirecedt to GitHub's website. Follow the OAuth flow.","That completes the steps to authorize Dotenv with GitHub."]],["Step 3","step-3",["The last step is to select the organization and repository. Choose your organization from the dropdown and enter the full the url of your GitHub repository.","Then set the base branch. In most cases, this is master or main.","Once that is complete, you will receive a generated pull request on that repository. It will look something like this:","That's it!","Each time your team makes a change to an environment variable, GitHub will generate a pull request with the latest built .env.vault file."]]]},{url:"/docs/addons/heroku",sections:[["Heroku",null,["Sync your secrets to Heroku when an environment variable is changed."]],["Step 1","step-1",["Navigate to the add-ons page. Click Heroku. Then click Connect Heroku."]],["Step 2","step-2",["You will be redirected to Heroku's website. Click Allow. This grants Dotenv access to sync config vars between Heroku and Dotenv.","That completes the steps to authorize Dotenv with Vercel."]],["Step 3","step-3",["The last step is to select an app from the drop down. Choose the app and click Finish Configuration.","That's it! Your secrets are now synced to Heroku and will continue to stay in sync when you modify your secrets.","Thanks for using Dotenv."]]]},{url:"/docs/addons/slack",sections:[["Slack Notifications",null,["Notify your team on Slack when an environment variable is changed. Connecting Dotenv to Slack takes just a couple clicks, instantly notifying your team of any secret changes."]],["Step 1","step-1",["Navigate to the add-ons tab. Click Slack. Then click Connect to Slack and follow the prompts."]],["Step 2","step-2",["You will be redirected to Slack's website. Select your organization (top right) and then click Allow. This grants Dotenv access to post messages in the Slack channel of your choosing.","That completes the steps to authorize Dotenv with Slack."]],["Step 3","step-3",["The last step is to select a channel. Enter your Channel ID and then click Finish Configuration.","(Find the Channel ID by clicking the channel name and scrolling to the bottom of the pop up modal.)","You should receive a notification in your Slack that Dotenv is configured \xfc\xe9\xe2.","ProTip: If you do not receive the notification that Slack is configured correctly, you might need to additionally add the Dotenv app to your Slack. Type /add app in your Slack channel and then search for Dotenv and add it.","That's it!"]]]},{url:"/docs/addons/vercel",sections:[["Vercel",null,["Sync your secrets to Vercel when an environment variable is changed."]],["Step 1","step-1",["Navigate to the add-ons page. Cick Add Vercel. Then click Connect Vercel."]],["Step 2","step-2",["On the next page, generate your Vercel API token and paste it in."]],["Step 3","step-3",["Lastly, choose which project to sync to and click Finish Configuration.","That's it! Your secrets are now synced to Vercel and will continue to stay in sync when you modify your secrets.","Thank you for using Dotenv with Vercel."]]]},{url:"/docs/cis/circleci",sections:[["CircleCI",null,["Languages","Node.js","CI/CD in Node.js with CircleCi\nRead guide","Ruby","CI/CD in Ruby with CircleCi\nRead guide"]]]},{url:"/docs/cis/github-actions",sections:[["GitHub Actions",null,["Languages","Node.js","CI/CD in Node.js with GitHub Actions\nRead guide","Frameworks","Next.js","CI/CD in Next.js with GitHub Actions\nRead guide","Remix","CI/CD in Remix.js with GitHub Actions\nRead guide"]]]},{url:"/docs/cis/google-cloud-build",sections:[["Google Cloud Build",null,["Languages","Node.js","CI/CD in Node.js with Google Cloud Build\nRead guide"]]]},{url:"/docs/dotenv-vault/build",sections:[["dotenv-vault build",null,["Build your encrypted .env.vault file."]],["Usage","usage",["1. Run build command","2. Set DOTENV_KEY","Run the keys command to get your product key and set it on your production environment.","3. Commit .env.vault to code","Safely commit your encrypted .env.vault file to code.","Deploy your code.","On application boot your .env.vault will be decrypted and its secrets injected just in time to your application."]],["Command Details","command-details",["For more information on the build command, run dotenv-vault help build."]]]},{url:"/docs/dotenv-vault/help",sections:[["dotenv-vault help",null,["Display help for dotenv-vault."]],["Usage","usage",["1. Run status command"]]]},{url:"/docs/dotenv-vault/keys",sections:[["dotenv-vault keys",null,["List your decryption keys for your .env.vault encrypted contents."]],["Usage","usage",["List all your keys.","List a single environment key. This is useful to more easily copy and paste the DOTENV_KEY."]],["Command Details","command-details",["For more information on the keys command, run dotenv-vault help keys."]]]},{url:"/docs/dotenv-vault/login",sections:[["dotenv-vault login",null,["Log in to dotenv-vault."]],["Usage","usage",["1. Run login command","2. Click log in","On the next screen, follow the login process and click 'Log in'.","","3. View .env.me (optional)","You now have a .env.me file in the root of your project. The .env.me file uniquely authorizes you to access a project's shared .env file. You can think of it like your unique SSH key at GitHub.","Run ls -al to view it.","","That's it!"]],["Command Details","command-details",["For more information on the login command, run dotenv-vault help login.","ARGUMENTS","[DOTENV_ME]","Set .env.me identifier. Defaults to generated value.","FLAGS","-y, --yes","Automatic yes to prompts. Assume yes to all prompts and run non-interactively."]]]},{url:"/docs/dotenv-vault/logout",sections:[["dotenv-vault logout",null,["Log out of dotenv-vault."]],["Usage","usage",["1. Run logout command","2. Click revoke","On the next screen, click 'Revoke'.","\n","That's it!","Attempting to use the revoked .env.me credential for any further dotenv-vault push or dotenv-vault pull commands will be denied."]],["Command Details","command-details",["For more information on the logout command, run dotenv-vault help logout.","FLAGS","-y, --yes","Automatic yes to prompts. Assume yes to all prompts and run non-interactively."]]]},{url:"/docs/dotenv-vault/new",sections:[["dotenv-vault new",null,["Create a .env.vault for your project. Keep your secrets safe in it."]],["Usage","usage",["1. Run new command","2. Name your project","On the page that opens, name your project (typically prefilled for you), and enter your email address.","","3. View .env.vault (optional)","A .env.vault was generated for your project. It uniquely identifies your project in dotenv-vault. Think of it like a unique git url at GitHub. It identifies your project so that you (and your teammates) pull the correct .env from dotenv-vault.","Run ls -al to view it.","","That's it!"]],["Command Details","command-details",["For more information on the new command, run dotenv-vault help new.","ARGUMENTS","[DOTENV_VAULT]","Set .env.vault identifier. Defaults to generated value.","FLAGS","-y, --yes","Automatic yes to prompts. Assume yes to all prompts and run non-interactively."]]]},{url:"/docs/dotenv-vault/open",sections:[["dotenv-vault open",null,["Open project page on dotenv-vault."]],["Usage","usage",["1. Run open command","","That's it!"]],["Command Details","command-details",["For more information on the open command, run dotenv-vault help open.","ARGUMENTS","[ENVIRONMENT]","Set environment to open to. Defaults to development.","FLAGS","-y, --yes","Automatic yes to prompts. Assume yes to all prompts and run non-interactively."]]]},{url:"/docs/dotenv-vault/pull",sections:[["dotenv-vault pull",null,["Pull .env securely with dotenv-vault."]],["Usage","usage",["1. Run pull command","2. View .env (optional)","You now have a .env file in the root of your project. The .env file holds your environment variables - their names and secrets.","Run ls -al to view it.","That's it!"]],["Command Details","command-details",["For more information on the pull command, run dotenv-vault help pull.","ARGUMENTS","[ENVIRONMENT]","Set environment to pull from. Defaults to development","[FILENAME]","Set output filename. Defaults to .env for development and .env.[ENVIRONMENT] for other environments","FLAGS","-m, --dotenvMe","Pass .env.me (DOTENV_ME) credential directly (rather than reading from .env.me file)","-y, --yes","Automatic yes to prompts. Assume yes to all prompts and run non-interactively."]]]},{url:"/docs/dotenv-vault/push",sections:[["dotenv-vault push",null,["Push .env securely with dotenv-vault."]],["Usage","usage",["1. Run push command","That's it!"]],["Command Details","command-details",["For more information on the push command, run dotenv-vault help push.","ARGUMENTS","[ENVIRONMENT]","Set environment to push to. Defaults to development","[FILENAME]","Set input filename. Defaults to .env for development and .env.[ENVIRONMENT] for other environments","FLAGS","-m, --dotenvMe","Pass .env.me (DOTENV_ME) credential directly (rather than reading from .env.me file)","-y, --yes","Automatic yes to prompts. Assume yes to all prompts and run non-interactively."]]]},{url:"/docs/dotenv-vault/rotatekey",sections:[["dotenv-vault rotatekey",null,["Rotate a project environment's DOTENV_KEY."]],["Usage","usage",["1. Run rotatekey command","Specify the environment. In the example below, we're rotating our production DOTENV_KEY.","2. Append the new DOTENV_KEY","Open your server where you have previously set your DOTENV_KEY value. Comma-append the new value.","For example, here is how you might set it on Heroku.","Note that the new value comes after the old one. The order doesn't matter, but we recommend placing the new value at the end so that you remember to delete the old (leading) value after you deploy.","3. Build and deploy","Next, we need to rebuild our encrypted .env.vault file with the new encryption key. Run dotenv-vault build.","Commit those changes safely to code and deploy.","That's it! Your code will now be running off the new DOTENV_KEY.","4. Clean up old value","It is a good idea to clean up the old value.","Return to your server and remove the old value inside the comma-separated list DOTENV_KEY. In heroku, it might look like this:","Nice work rotating your keys! If you really want to go the extra mile you can automate this into your CI/CD process. That way you rotate your decryption key on some set schedule - every quarter for example."]],["Command Details","command-details",["For more information on the rotatekey command, run dotenv-vault help rotatekey."]]]},{url:"/docs/dotenv-vault/status",sections:[["dotenv-vault status",null,["Check dotenv-vault operational status."]],["Usage","usage",["1. Run status command","","That's it!"]],["Command Details","command-details",["For more information on the status command, run dotenv-vault help status.","FLAGS","-y, --yes","Automatic yes to prompts. Assume yes to all prompts and run non-interactively."]]]},{url:"/docs/dotenv-vault/versions",sections:[["dotenv-vault versions",null,["List version history for your project in dotenv-vault."]],["Usage","usage",["1. Run versions command","That's it!"]],["Command Details","command-details",["For more information on the versions command, run dotenv-vault help versions.","ARGUMENTS","[ENVIRONMENT]","Set environment to check versions against. Defaults to development","FLAGS","-m, --dotenvMe","Pass .env.me (DOTENV_ME) credential directly (rather than reading from .env.me file)","-y, --yes","Automatic yes to prompts. Assume yes to all prompts and run non-interactively."]]]},{url:"/docs/dotenv-vault/whoami",sections:[["dotenv-vault whoami",null,["Display the current logged in user."]],["Usage","usage",["1. Run whoami command","That's it!"]],["Command Details","command-details",["For more information on the whoami command, run dotenv-vault help whoami.","FLAGS","-m, --dotenvMe","Pass .env.me (DOTENV_ME) credential directly (rather than reading from .env.me file)"]]]},{url:"/docs/features/access-controls",sections:[["Access Controls",null,["Control read & write access per environment. ",""]]]},{url:"/docs/features/compare-environments",sections:[["Compare Environments",null,["Compare environments from a single page. ","","See secret differences and spot if any are missing","Go directly to a secret","Copy secrets across environments in a couple clicks","Video Tutorial","Watch a short video on how to use this feature."]]]},{url:"/docs/features/custom-environments",sections:[["Custom Environments",null,["Customize environments per project and at the organizational level. ",""]]]},{url:"/docs/features/encrypted-deploys",sections:[["Encrypted Deploys",null,["Deploy your secrets securely with encrypted .env.vault files. ","","Uses AES-256 GCM encryption. Developed for the needs of US Government agencies like the CIA","Decrypts and injects your secrets just in time on application boot","No more scattered secrets across third parties that might leak them"]]]},{url:"/docs/features/environments",sections:[["Multiple Environments",null,["Manage your .env files across multiple environments. ","","Develompent, ci, staging, and production environments","Manage secrets across multiple environments through both the ui and dotenv-vault"]]]},{url:"/docs/features/personal-environment-variables",sections:[["Personal Environment Variables",null,["Set personal environment variables that only you can see. ",""]]]},{url:"/docs/features/sync",sections:[["Sync .env files",null,["Sync your secrets securely across your team. ","","Push and pull changes to your .env file(s)","Share securely between teammates","Optionally make changes directly in the UI"]]]},{url:"/docs/features/unlimited-projects",sections:[["Unlimited Projects",null,["Store an unlimited amount of secrets with unlimited projects. ","","Create an unlimited amount of projects","Create an unlimited amount of secrets per project","Access those secrets using dotenv-vault"]]]},{url:"/docs/features/version-history",sections:[["Version History",null,["Keep track of all versions of your .env file. ",""]]]},{url:"/docs/frameworks/express",sections:[["Express.js",null,["Platforms","Docker Compose","Deploy an Express.js App with Docker Compose\nRead guide","Fly","Deploy an Express.js App to Fly.io\nRead guide","Heroku","Deploy an Express.js App to Heroku\nRead guide","Vercel","Deploy an Express.js App to Vercel\nRead guide"]]]},{url:"/docs/frameworks/gatsby",sections:[["Gatsby.js",null,["Platforms","Gatsby Edge Network","Deploy a Gatsby.js App to Gatsby Edge Network\nRead guide"]]]},{url:"/docs/frameworks/laravel",sections:[["Laravel",null,["Platforms","Heroku","Deploy a Laravel App to Heroku\nRead guide","Laravel Forge","Deploy a Laravel App to Laravel Forge\nRead guide"]]]},{url:"/docs/frameworks/nextjs",sections:[["Next.js",null,["Platforms","Netlify","Deploy a Next.js App to Netlify\nRead guide","Vercel","Deploy a Next.js App to Vercel\nRead guide","CI/CDs","GitHub Actions","Use .env.vault with Next.js and GitHub Actions\nRead guide"]]]},{url:"/docs/frameworks/nuxtjs",sections:[["Nuxt.js",null,["Platforms","Edgio","Deploy a Nuxt.js App to Edgio\nRead guide","Vercel","Use .env.vault with Nuxt.js and Vercel\nRead guide"]]]},{url:"/docs/frameworks/rails",sections:[["Rails",null,["Platforms","Fly","Deploy a Rails App to Fly.io\nRead guide","Heroku","Deploy a Rails App to Heroku\nRead guide","Kamal","Deploy a Rails App with Kamal\nRead guide"]]]},{url:"/docs/frameworks/remix",sections:[["Remix.js",null,["Platforms","Vercel","Use .env.vault with Remix.js and Vercel\nRead guide","CI/CDs","GitHub Actions","Use .env.vault with Remix.js and GitHub Actions\nRead guide"]]]},{url:"/docs/help/github-integration-missing-organization",sections:[["GitHub Integration Missing Organization",null,["Problem: I don't see my organization in the dropdown list of GitHub organizations. It should be there.","Context: This is relatively common. It happens when you add a new organization to your GitHub - after having already granted Dotenv access to GitHub. For security reasons, GitHub does not automatically grant access to the new organization. Luckily, it's easy to fix.","Solution:","Go to Github Settings > Applications > Authorized OAuth Apps.","Scroll until you find Dotenv.org","Click Dotenv.org","On the next page, find the list of GitHub organizations","Click the Grant button for each organization that needs access.","Thank you for using Dotenv. Need further help? Email us at support@dotenv.org."]]]},{url:"/docs/help/github_integration_missing_organization",sections:[["GitHub Integration Missing Organization",null,["Problem: I don't see my organization in the dropdown list of GitHub organizations. It should be there.","Context: This is relatively common. It happens when you add a new organization to your GitHub - after having already granted Dotenv access to GitHub. For security reasons, GitHub does not automatically grant access to the new organization. Luckily, it's easy to fix.","Solution:","Go to Github Settings > Applications > Authorized OAuth Apps.","Scroll until you find Dotenv.org","Click Dotenv.org","On the next page, find the list of GitHub organizations","Click the Grant button for each organization that needs access.","Thank you for using Dotenv. Need further help? Email us at support@dotenv.org."]]]},{url:"/docs/languages/go",sections:[["Go",null,["Quickstart","Quickstart","Quickstart guide for Go and .env.vault\nQuickstart"]]]},{url:"/docs/languages/kotlin",sections:[["Kotlin",null,["ⓘ This guide assumes you are already familiar with dotenv-kotlin. It extends it with dotenv-vault-kotlin."]],["\uD83C\uDF31 Install","install",["Add jitpack repository to your build.gradle or build.gradle.kts and require the com.github.dotenv-org:dotenv-vault-kotlin:x.x.x implementation dependency.","or"]],["\uD83C\uDFD7️ Usage (.env)","usage-env",["Development usage works just like dotenv-kotlin.","Add your application configuration to your .env file in the root of your project:","As early as possible in your application code, load .env:"]],["\uD83D\uDE80 Deploying (.env.vault)","deploying-env-vault",["Install dotenv-vault.","Then encrypt your environment variables by doing:","This will create an encrypted .env.vault file along with a .env.keys file containing the encryption keys.","Set the DOTENV_KEY environment variable by copying and pasting the key value from the .env.keys file onto your server or cloud provider. For example in heroku:","Commit your .env.vault file safely to code and deploy. Your .env.vault fill be decrypted on boot, its environment variables injected, and your app work as expected."]],["\uD83C\uDF34 Manage Multiple Environments","manage-multiple-environments",["You have two options for managing multiple environments - locally managed or vault managed - both use dotenv-vault.","Locally managed never makes a remote API call. It is completely managed on your machine. Vault managed adds conveniences like backing up your .env file, secure sharing across your team, access permissions, and version history. Choose what works best for you.","\uD83D\uDCBB Locally Managed","Create a .env.production file in the root of your project and put your production values there.","Rebuild your .env.vault file.","Check your .env.keys file. There is a production DOTENV_KEY that coincides with the additional DOTENV_VAULT_PRODUCTION cipher in your .env.vault file.","Set the production DOTENV_KEY on your server, recommit your .env.vault file to code, and deploy. That's it!","\uD83D\uDD10 Vault Managed","Sync your .env file. Run the push command and follow the instructions. learn more","Manage multiple environments with the included UI. learn more","Build your .env.vault file with multiple environments.","Access your DOTENV_KEY.","Set the production DOTENV_KEY on your server, recommit your .env.vault file to code, and deploy. That's it!"]],["❓ FAQ","faq",["What happens if DOTENV_KEY is not set?","godotenvvault gracefully falls back to godotenv when DOTENV_KEY is not set. This is the default for development so that you can focus on editing your .env file and save the build command until you are ready to deploy those environment variables changes.","Should I commit my .env file?","No. We strongly recommend against committing your .env file to version control. It should only include environment-specific values such as database passwords or API keys. Your production database should have a different password than your development database.","Should I commit my .env.vault file?","Yes. It is safe and recommended to do so. It contains your encrypted envs, and your vault identifier.","Can I share the DOTENV_KEY?","No. It is the key that unlocks your encrypted environment variables. Be very careful who you share this key with. Do not let it leak."]]]},{url:"/docs/languages/nodejs",sections:[["Node.js",null,["Quickstart","Quickstart","Quickstart guide for Node.js and .env.vault\nQuickstart","Frameworks","Platforms","AWS Lambda","Deploy a Node.js App to AWS Lambda\nRead guide","Cloud66","Deploy a Node.js App to Cloud66\nRead guide","Digital Ocean","Deploy a Node.js App to Digital Ocean\nRead guide","Docker","Deploy a Node.js App with Docker\nRead guide","Fly","Deploy a Node.js App to Fly.io\nRead guide","Heroku","Deploy a Node.js App to Heroku\nRead guide","Railway","Deploy a Node.js App to Railway\nRead guide","Render","Deploy a Node.js App to Render\nRead guide","Vercel","Deploy a Node.js App to Vercel\nRead guide","CI/CDs","AWS Beanstalk","CI/CD in Node.js with AWS Beanstalk\nRead guide","Bitbucket","CI/CD in Node.js with Bitbucket\nRead guide","Buddy","CI/CD in Node.js with Buddy\nRead guide","CircleCI","CI/CD in Node.js with CircleCI\nRead guide","Dagger","CI/CD in Node.js with Dagger\nRead guide","GitHub Actions","CI/CD in Node.js with GitHub Actions\nRead guide","Gitlab CI/CD","CI/CD in Node.js with Gitlab CI\nRead guide","Google Cloud Build","Use .env.vault with Google Cloud Build\nCloud Build Guides","Jenkins","CI/CD in Node.js with Jenkins\nRead guide","Pulumi","CI/CD in Node.js with Pulumi\nRead guide","Travis CI","CI/CD in Node.js with Travis CI\nRead guide"]]]},{url:"/docs/languages/php-backup",sections:[["PHP",null,["ⓘ This guide assumes you are already familiar with phpdotenv. It extends it with phpdotenv-vault."]],["\uD83C\uDF31 Install","install",[]],["\uD83C\uDFD7️ Usage (.env)","usage-env",["Development usage works just like phpdotenv.","Add your application configuration to your .env file in the root of your project:","When your application loads, these variables will be available in os.environ or os.getenv:"]],["\uD83D\uDE80 Deploying","deploying",["Encrypt your environment variables by doing:","This will create an encrypted .env.vault file along with a .env.keys file containing the encryption keys. Set the DOTENV_KEY environment variable by copying and pasting the key value from the .env.keys file onto your server or cloud provider. For example in heroku:","Commit your .env.vault file safely to code and deploy. Your .env.vault fill be decrypted on boot, its environment variables injected, and your app work as expected.","Note that when the DOTENV_KEY environment variable is set, environment settings will always be loaded from the .env.vault file in the project root. For development use, you can leave the DOTENV_KEY environment variable unset and fall back on the dotenv behaviour of loading from .env."]],["\uD83C\uDF34 Manage Multiple Environments","manage-multiple-environments",["You have two options for managing multiple environments - locally managed or vault managed - both use dotenv-vault.","Locally managed never makes a remote API call. It is completely managed on your machine. Vault managed adds conveniences like backing up your .env file, secure sharing across your team, access permissions, and version history. Choose what works best for you.","\uD83D\uDCBB Locally Managed","Create a .env.production file in the root of your project and put your production values there.","Rebuild your .env.vault file.","View your .env.keys file. There is a production DOTENV_KEY that pairs with the DOTENV_VAULT_PRODUCTION cipher in your .env.vault file.","Set the production DOTENV_KEY on your server, recommit your .env.vault file to code, and deploy. That's it!","Your .env.vault fill be decrypted on boot, its production environment variables injected, and your app work as expected.","\uD83D\uDD10 Vault Managed","Sync your .env file. Run the push command and follow the instructions. learn more","Manage multiple environments with the included UI. learn more","Build your .env.vault file with multiple environments.","Access your DOTENV_KEY.","Set the production DOTENV_KEY on your server, recommit your .env.vault file to code, and deploy. That's it!"]],["❓ FAQ","faq",["What happens if DOTENV_KEY is not set?","Dotenv Vault gracefully falls back to phpdotenv when DOTENV_KEY is not set. This is the default for development so that you can focus on editing your .env file and save the build command until you are ready to deploy those environment variables changes.","Should I commit my .env file?","No. We strongly recommend against committing your .env file to version control. It should only include environment-specific values such as database passwords or API keys. Your production database should have a different password than your development database.","Should I commit my .env.vault file?","Yes. It is safe and recommended to do so. It contains your encrypted envs, and your vault identifier.","Can I share the DOTENV_KEY?","No. It is the key that unlocks your encrypted environment variables. Be very careful who you share this key with. Do not let it leak."]]]},{url:"/docs/languages/php",sections:[["PHP",null,["Quickstart","Quickstart","Quickstart guide for PHP and .env.vault\nQuickstart","Frameworks","Laravel","Deploy a Laravel App to Heroku\nRead guide","Platforms","Heroku","Deploy a PHP App to Heroku\nRead guide"]]]},{url:"/docs/languages/python",sections:[["Python",null,["Quickstart","Quickstart","Quickstart guide for Python and .env.vault\nQuickstart","Frameworks","Platforms","Heroku","Deploy a Flask App to Heroku\nRead guide"]]]},{url:"/docs/languages/ruby",sections:[["Ruby",null,["Quickstart","Quickstart","Quickstart guide for Ruby and .env.vault\nQuickstart","Frameworks","CI/CDs","CircleCI","CI/CD in Ruby with CircleCI\nRead guide"]]]},{url:"/docs/languages/rust",sections:[["Go",null,["Quickstart","Quickstart","Quickstart guide for Rust and .env.vault\nQuickstart","Frameworks","Rocket","Deploy a Rocket App to Heroku\nRead guide","Platforms","Heroku","Deploy a Rocket App to Heroku\nRead guide"]]]},{url:"/docs/platforms/aws-lambda",sections:[["AWS Lambda",null,["Languages","Node.js","Deploy a Node.js App to AWS Lambda\nRead guide","Frameworks","Serverless","Deploy a Serverless App to AWS Lambda\nRead guide"]]]},{url:"/docs/platforms/docker",sections:[["Docker",null,["Languages","Node.js","Deploy a Node.js App with Docker\nRead guide","Frameworks","Express.js","Deploy an Express.js App with Docker Compose\nRead guide"]]]},{url:"/docs/platforms/fly",sections:[["Fly.io",null,["Languages","Node.js","Deploy a Node.js App to Fly.io\nRead guide","Frameworks","Express.js","Deploy an Express.js App to Fly.io\nRead guide"]]]},{url:"/docs/platforms/heroku",sections:[["Heroku",null,["Languages","Node.js","Deploy a Node.js App to Heroku\nRead guide","PHP","Deploy a PHP App to Heroku\nRead guide","Frameworks","Express.js","Deploy an Express.js App to Heroku\nRead guide","Nest.js","Deploy a Nest.js App to Heroku\nRead guide","PM2","Deploy a PM2 App to Heroku\nRead guide","FastApi","Deploy a FastApi App to Heroku\nRead guide","Flask","Deploy a Flask App to Heroku\nRead guide","Sinatra","Deploy a Sinatra App to Heroku\nRead guide","Laravel","Deploy a Laravel App to Heroku\nRead guide","Rocket","Deploy a Rocket App to Heroku\nRead guide"]]]},{url:"/docs/platforms/kamal",sections:[["Kamal",null,["Frameworks","Rails","Deploy a Rails App with Kamal\nRead guide"]]]},{url:"/docs/platforms/netlify",sections:[["Netlify",null,["Frameworks","Next.js","Deploy a Next.js App to Netlify\nRead guide","Astro","Deploy an Astro.js App to Netlify\nRead guide"]]]},{url:"/docs/platforms/vercel",sections:[["Vercel",null,["Languages","Node.js","Deploy a Node.js App to Vercel\nRead guide","Frameworks","Angular","Deploy an Angular App to Vercel\nRead guide","Express.js","Deploy an Express.js App to Vercel\nRead guide","Next.js","Deploy a Next.js App to Vercel","Read guide","Remix.js","Deploy a Remix.js App to Vercel\nRead guide","SvelteKit","Deploy a SvelteKit App to Vercel\nRead guide","Turborepo","Deploy a Turborepo App to Vercel\nRead guide","Vite","Deploy a Vite App to Vercel\nRead guide"]]]},{url:"/docs/quickstart/deploy",sections:[["Deploy .env.vault files in production",null,["Deploy your encrypted .env.vault files to production (or staging or ci) using this quickstart guide. "]],["Build .env.vault","build-env-vault",["Begin by building your project's encrypted .env.vault file. It securely encrypts your secrets in a cloud-agnostic payload.","Commit that safely to code.","Yes it safe AND recommended you commit the .env.vault file to code. It contains AES-256 GCM encrypted ciphers of your environment secrets - that are decrypted just-in-time using an environment DOTENV_KEY."]],["Fetch DOTENV_KEY","fetch-dotenv-key",["Fetch your production decryption key - the DOTENV_KEY - to decrypt your .env.vault file.","This will output your production DOTENV_KEY.","Use that DOTENV_KEY to run your application in production mode locally - as a quick test.","You will know it is working if you see the log message Loading env from encrypted .env.vault.","The DOTENV_KEY decrypts the production contents of .env.vault and injects its secrets just-in-time to your running process. All that's left to do is set your DOTENV_KEY on your production server and deploy your code."]],["Set DOTENV_KEY","set-dotenv-key",["Set your production DOTENV_KEY on your server. For example, on Heroku you set it with their cli.","Here's a video showing the entire process."]],["Conclusion","conclusion",["Congrats! You now understand how .env.vault files work.","This is much safer than syncing your secrets to third-parties where they could leak. CircleiCi had a secrets breach not long ago. .env.vault protects you from breaches like that. An attacker would have to get their hands on both your DOTENV_KEY AND your codebase.","In addition, you now have a single source of truth that is easy to manage. Make a change in the UI, run the build command, and redeploy. Spend less time juggling secrets and more time coding.","The best part is the technology is platform and framework agnostic. We've compiled a list of almost 100 guides (so far). Linked below are some of our most-visited guides. Click a logo and get started.","Thanks for using Dotenv!"]],["FAQ","faq",["What happens if DOTENV_KEY is not set?","It gracefully falls back to loading from your .env file. This is the default for development so that you can focus on editing your .env file and save the build command until you are ready to deploy those environment variables changes.","Should I commit my .env.vault file?","Yes. It is safe and recommended to do so. It contains your encrypted envs, and your vault identifier.","Can I share the DOTENV_KEY?","No. It is the key that unlocks your encrypted environment variables. Be very careful who you share this key with. Do not let it leak.","Should I commit my .env file?","No. We strongly recommend against committing your .env file to version control. It should only include environment-specific values such as database passwords or API keys. Your production database should have a different password than your development database."]]]},{url:"/docs/quickstart/development",sections:[["Load .env files in development",null,["Load your .env files in development using this quickstart guide. "]],["Create .env file","create-env-file",["Create a .env file."]],["Install dotenv","install-dotenv",["Install dotenv in the language of your choice."]],["Require dotenv","require-dotenv",["Write your application code and require dotenv.","Here we are creating a simple Hello World server and requiring the dotenv library first - before any other code runs.","Note the code written as Hello ${process.env.HELLO}. This is where dotenv loads HELLO=World form the .env file and injects it into your process env."]],["Run application","run-application",["Run your application.",'If successful, you will see "Hello World".']],["Conclusion","conclusion",["That's it! You now understand the basics of using dotenv in development. I recommend learning how to deploy .env.vault in production next.","Deploy .env.vault files in production","Add teammates to your projects","Thanks for using Dotenv!"]],["FAQ","faq",["Should I commit my .env file?","No. We strongly recommend against committing your .env file to version control. It should only include environment-specific values such as database passwords or API keys. Your production database should have a different password than your development database and we recommend storing those values in a .env.vault file."]]]},{url:"/docs/quickstart/environments",sections:[["Manage multiple environments",null,["Manage multiple environments like .env.ci, .env.staging, and .env.production with this quickstart guide. "]],["Create .env.production","create-env-production",["Create a .env.production file.","Next, push .env.production to its env vault."]],["Push","push",["Run the push command with the environment argument.","This securely pushes your .env.production secrets to your project vault's production environment.","Next, let's view your secrets in the UI."]],["Open","open",["Run the open command to view your production environment variables in the UI.","Just like the push command, you pass an additional production environment argument to open directly to that environment's secrets.","Make a change in the UI and then pull the latest .env.production file."]],["Pull","pull",[]],["Conclusion","conclusion",["Solid! You completed this quickstart guide – managing your secrets across multiple environments. I recommend learning how to load .env files in development next.","Load .env files in development","Add teammates to your projects"]],["Advanced Commands","advanced-commands",["Run the help push and help pull commands to see how you can further customize these commands.","For example, a common need is to pull production secrets to a normal .env file. You can do so with this command.","Default environments","Every project comes with four default environments and their corresponding .env.ENVIRONMENT files.","development => .env","ci => .env.ci","staging => .env.staging","production => .env.production","Want to customize your default environments? You can do so from the ui.","You can push to each one by appending the environment name after push.","The same for pulling. Append the environment name after pull.","Appending your main environment (development) is redundant. The cli assumes the main environment when the environment argument is ommitted.","Custom filenames","You can push and pull a different filename to each one by further appending the filename after the environment argument.","DOTENV_ME flag","In some automation scenarios, you might not have a .env.me file present. In those cases you can pass the value of your DOTENV_ME credential to the cli using the --dotenvMe flag.","Big congrats! You have advanced knowledge now – when it comes to managing multiple environments and using the push and pull commands."]]]},{url:"/docs/quickstart/sync",sections:[["Sync .env files",null,["Sync your .env files using this quickstart guide. ","In just a couple minutes, you'll be able to sync your .env files across machines, teams, and environments.","I built dotenv-vault to scratch my own itch. I wanted it to be developer-first and cli-first (like a lot of my favorite dev tools). There's a bit of a learning curve with the cli (also like a lot of my favorite dev tools), but once you use it a couple times it becomes familiar, and I think you will like it. I hope you do. Let's get started together.","Mot"]],["Create .env file","create-env-file",["Create a .env file.","Next, set up it's .env.vault."]],["Set up .env.vault","set-up-env-vault",["Run dotenv-vault's new command.","Running this command sets up your project on Dotenv and creates your project's .env.vault file. It will look like this.","The .env.vault file uniquely identifies your project on Dotenv. You can think of it like a unique git url at GitHub. It identifies your project so that you and your teammates pull the correct .env file from Dotenv. Read more about .env.vault files.","Next, log in to your .env.vault."]],["Log in .env.vault","log-in-env-vault",["Run the login command.","Running this command authenticates you against your project on Dotenv and securely generates your .env.me credential. Your .env.me file will look like this.","The .env.me file uniquely authorizes you to access your project's env vault. You can think of it like your unique SSH key at GitHub. It identifies your machine so that you can safely and securely sync your .env file from Dotenv. Read more about .env.me files.","Next, push your .env file."]],["Push .env","push-env",["Run the push command.","This securely pushes your .env file to your Dotenv Account. It works a lot like git."]],["Pull .env","pull-env",["You can pull the latest changes too. Run the pull command."]],["Conclusion","conclusion",["Congrats! You synced your .env file and completed this quickstart guide. What's next? I recommend learning how to manage multiple environments like .env.production next.","Manage multiple environments like .env.production","Add teammates to your projects","Thanks for using Dotenv!"]]]},{url:"/docs/security/dotenv-key",sections:[["DOTENV_KEY",null,["You can view it with npx dotenv-vault keys. Set it on your server's environment variables after running npx dotenv-vault build.","Example","Here's an example of a DOTENV_KEY.","Viewing","You can view a DOTENV_KEY by running the keys command.","Specify an environment to view that key alone."]]]},{url:"/docs/security/env-it",sections:[["Integration Tokens",null,["While a .env.me credential permits push and pull across ALL environments, an IT token does not. IT tokens can ONLY pull and only for a single environment.","This means you cannot create an IT token to pull both staging secrets and production secrets. You instead have to generate two separate IT tokens - one for production and one for staging. This is by design to further protect your secrets and practice the principle of least privilege.","How can I get an IT token? They are auto-generated for you when you add an integration to an environment.","Example","Here's an example of what an IT Token looks like:","Here's an example of it put to use:","Generating","You can generate an IT token by adding an integration to an environment."]]]},{url:"/docs/security/env-me",sections:[[".env.me",null,["The .env.me file uniquely authorizes you to access a project's shared .env file. You can think of it like your unique SSH key at GitHub.","But the .env.me credential has stricter security measures than GitHub's SSH key. The GitHub SSH key allows FULL access to all your repositories. We think this is too dangerous. So we have limited the authorization scope.","The .env.me credential authorizes your machine against a single project. In other words, for each unique project on your machine you will have a unique .env.me credential file. These are generated via the cli (and in some cases the ui) and through a proven authentication method - minimizing the complexity of managing multiple credentials.","This is all by design. This way if an attacker somehow gets access to your .env.me credential (maybe you accidently committed it to source control), they are not getting access to all your secrets. You can then rotate your .env.me credential for that project only, manually rotate or auto-rotate (coming soon) that project's secrets, and be on your way. As a CTO, CSO, or startup founder this helps you mitigate the fallout from a security leak - setting you apart from others. In fact, your security hygiene will be better than most banks and fortune 500 companies in this regard."]],["Example","example",["Here's an example of what a .env.me file looks like:","The first thing you might notice is the formatting is the same as a .env file. This is intentional to allow for maximum future interoperability - just like the .env.vault file.","The DOTENV_ME key will be the only value this file contains. Keep it safe and out of source control - just like your .env file."]],["Generating","generating",["You can generate a .env.me file at vault.dotenv.org or using dotenv-vault. The authorization flow follows a similar pattern to world class authorization flows found in cli tools like Heroku's cli and Vercel's cli. It is both secure and simple."]]]},{url:"/docs/security/env-vault",sections:[[".env.vault",null,["The .env.vault file uniquely identifies your project in dotenv-vault. You SHOULD commit this file to source control. It is safe to do so. Aside: DON'T commit your .env or .env.me to source control.","You can think of it like a unique git url at GitHub. It identifies your project so that your teammates pull the correct .env file from dotenv-vault."]],["Example","example",["Here's an example of what a .env.vault file looks like:","The first thing you might notice is the formatting is the same as a .env file. This is intentional to allow for maximum future interoperability.","The DOTENV_VAULT key is important. It is required. It is that value that identifies your project uniquely to the dotenv vaulting mechanisms."]],["Generating","generating",["You can generate a .env.vault file at vault.dotenv.org or through dotenv-vault. The process is similar to creating and cloning your very first git repo on GitHub."]]]},{url:"/docs/security/env",sections:[[".env",null,["The .env file format is central to good DSX and has been since it was introduced by Heroku in 2012 and popularized by the dotenv node module (and other libraries) in 2013.","The .env file format starts where the developer starts - in development. It is added to each project but NOT committed to source control. This gives the developer a single secure place to store sensitive application secrets.","Can you believe that prior to introducing the .env file, almost all developers stored their secrets as hardcoded strings in source control. That was only 10 years ago!"]],["Example","example",["Here's an example of what a .env file looks like:","It is purposefully simple because, as security professionals, we know that complexity is the enemy of security.","You can read more about how it works here (or at other implementations here, here, here). It is the gold standard for securing development secrets - proven and trusted by millions of developers around the world.","But the world has changed and developers manage secrets at far greater scale than a decade ago. Today it's difficult to securely share .env files between machines, environments, and team members. As a result, developers often share secrets over Slack, email, text message, and post-it notes. It's not scaleable and fraught with security risks. For a CTO or CSO it is a risk they should not take."]],["Extending .env","extending-env",["Luckily, that is changing. We have been extending the .env file format to support secure sharing.","The .env file format will still be at the center of security. But we have added two new extensions. They are not required. They are optional, but we highly recommend them for teams. They are the:",".env.vault extension",".env.me extension","In the next set of security docs you can read about how these work alongside your .env files to significantly improve security. This is the next great leap forward in application secrets security, and like the original .env file format we have worked hard to minimize complexity in order to increase security."]]]},{url:"/docs/security/vault",sections:[["Vault",null,["The process by which secrets are stored in Vault is broken down into steps below. You can also view the marketing security page for the same content.","Step 1","npx dotenv-vault push You run npx dotenv-vault push. Your request is started.","Step 2","Encrypted Connection Your .env file is encrypted and sent securely over SSL to Dotenv's in-memory servers.","Step 3","Dotenv Servers This encrypted payload is decrypted and briefly held in memory to complete the next steps. Afterward, the memory is flushed. Rest assured the decrypted version is never persisted to Dotenv systems.","Step 4","Parsing Your .env file is parsed line by line - in memory.","There are minor differences between dotenv parsers across various languages and frameworks. So far Dotenv Vault handles 100% of these, and we continue to add test cases to cover all edge cases.","Step 5","Secret Extraction Each key/value pair (and any comments) are extracted - in memory.","Step 6","Secret Division The secret is divided into its separate key and value. This is by design. They will be stored in separate databases for added security. This way if an attacker somehow gained access to one database they would not be able to make sense of the data - having only half the puzzle.","Step 7","AES-GCM Encryption The KEY is encrypted. The VALUE is encrypted. They are encrypted with different master encryption keys. This way if an attacker somehow gained access to the VALUE decryption key they would find the data useless. They would not know if the secret belonged to Twilio or to AWS.","Encryption uses the AES-GCM algorithm. It is:","well-studied","NIST recommended","an IETF standard","fast thanks to a dedicated instruction set","Additionally, all master encryption keys are rotated on an unpublished schedule, further adding to the level of security.","Step 8","Tokenization The encrypted VALUE is sent to Dotenv Vault for safe storage. A token is returned as an identifier. The token is used in the next step for mapping the KEY to the VALUE for later secure-read operations.","Multiple security measures go into the Vault. They include but are not limited to:","Separate datastore from the application database","Not accessible via the internet and all external connections are prevented","Encrypted clients are required and these clients have to go through the application - which has its own additional layers of encryption","There are stricter TLS requirements for connecting to the Vault. TLS 1.0 cannot be used to connect.","The secrets stored in the Vault are not just encrypted at the datastore level. They are also encrypted at each datastore entry as you saw in the prior step(s).","Step 9","Store Key Part with Token Lastly, the encrypted KEY and token (representing the encrypted VALUE) are placed in an envelope and stored together in the application database.","Step 10","Success 201 A success message is returned to the developer."]],["Security Specifications","security-specifications",["Here's additional specifications that went into build Dotenv Vault.","The Dotenv Vault is a separate datastore from the application database. This way if an attacker gains access to the application database they do not gain access to the vault datastore.","The Dotenv Vault datastore is not accessible via the internet and all external connections are prevented. This way an attacker can not remotely access the Dotenv Vault datastore. Encrypted clients are required and these clients have to go through the application - which has its own layers of encryption.","There are stricter TLS requirements for connecting to the Dotenv Vault datastore. TLS 1.0 cannot be used to connect.","The secrets stored in the Dotenv Vault are not just encrypted at the datastore level. They are also encrypted at each VALUE. This way even if an attacker gains access to the datastore they could not make sense of the encrypted values.","The VAULT does NOT store the KEY. It ONLY stores the VALUE. The KEY is stored in the application database and a shared pointer (in both datastores) allows them to be identified as a pair. This way an attacker must gain access to both the application database and the Dotenv Vault datastore to make sense of the values.","The encryption key(s) used to encrypt the secret values are rotated on an unpublished schedule. This way an attacker might gain access to an old encryption key but not the most recent - foiling their ability to decrypt the secret values.","Encryption uses AES-GCM encryption. It is a well-studied, NIST recommended, and IEFT standard algorithim.","As you see, we go to great lengths to make sure your secrets are safe. Afterall, we keep our secrets here too."]]]},{url:"/docs/sync/quickstart",sections:[["Quickstart ⚡️",null,["You should already have a .env file. Learn more","In this guide, we'll create a dotenv-vault project and push secrets to it.","Usage is similar to git. Run the command:","Follow those instructions and then run:","Then run push and pull:","That's it! You synced your .env file.","Visit docs/quickstart for the complete ⚡️ quickstart guide."]]]},{url:"/docs/tutorials/access",sections:[["Managing Access",null,[]],["Click config icon","click-config-icon",["Visit the team page and click config next to your teammate's name."]],["Select environment","select-environment",["Select the environment to limit access to."]],["Configure permissions","configure-permissions",["Configure your teammate's access.","View - Permit your teammate to see values in the UI for this project","Push - Permit your teammate to change values in the UI and from the CLI","Pull - Permit your teammate to pull values using the CLI"]]]},{url:"/docs/tutorials/environments",sections:[["Managing Environments",null,[]],["Run dotenv-vault open","run-dotenv-vault-open",["Open terminal, enter your project's root directory (where your .env.vault file is), and run dotenv-vault open.","FYI: Not a developer? You can navigate to this page by visiting ui.dotenv.org."]],["Click Environment Dropdown Button","click-environment-dropdown-button",["Click the environment dropdown button labeled 'development' and then click 'production'."]],["Edit Your Production Environment Variables","edit-your-production-environment-variables",["Click the edit icon next to the environment variable you want to edit.","FYI: You'll notice that your production environment variable names are already setup but with blank values. This is by design. Each time you add an environment variable to your .env file it gets copied over to your other environments."]],["Set the Production Value","set-the-production-value",["Enter a value and click 'Save changes'."]],["Pull .env.production","pull-env-production",["Return to terminal and run dotenv-vault pull production."]],["View .env.production file","view-env-production-file",["Run ls -al to view it."]],["Push .env.production file (optional)","push-env-production-file-optional",["Prefer to manage your non-development environments with the cli? Edit .env.production and run dotenv-vault push production.","That's it! Thanks for using dotenv-vault with multiple environments."]]]},{url:"/docs/tutorials/integrations",sections:[["Integrate Everywhere",null,[]],["Run dotenv-vault build","run-dotenv-vault-build",["Open terminal, enter your project's root directory (where your .env.vault file is), and run dotenv-vault build.","Your .env.vault file should now look something like this.","As you can see, your environment variables are encrypted per environment."]],["Set DOTENV_KEY","set-dotenv-key",["The DOTENV_KEY decrypts the encrypted values from DOTENV_VAULT_PRODUCTION. Run dotenv-vault keys production.","That will output your DOTENV_KEY.","Set DOTENV_KEY on your infrastructure. For example, on Heroku:"]],["Require dotenv >= 16.1.0","require-dotenv-16-1-0",["The last step is to require dotenv >= 16.1.0 into your code.","As early as possible in your application, import and configure dotenv:","Note: Other languages like Ruby, Python, PHP, etc are also supported.","That's it!","When your app boots, it will recognize the DOTENV_KEY, decrypt the .env.vault file, and load the variables to ENV. If a DOTENV_KEY is not set (like during development on your local machine) it will fall back to regular dotenv."]]]},{url:"/docs/tutorials/sync",sections:[["Sync .env files",null,[]],["Run dotenv-vault new","run-dotenv-vault-new",["Open terminal, enter your project's root directory (where you keep your .env file), and run dotenv-vault new.","FYI: npx is a very powerful command that lets you run code built with NodeJS and published through the npm registry."]],["Name your project","name-your-project",["On the page that opens, name your project (typically prefilled for you), and enter your email address."]],["View .env.vault file (optional)","view-env-vault-file-optional",["A .env.vault was generated for your project. It uniquely identifies your project in dotenv-vault. Think of it like a unique git url at GitHub. It identifies your project so that you (and your teammates) pull the correct .env from dotenv-vault.","Run ls -al to view it."]],["Run dotenv-vault login","run-dotenv-vault-login",["Next, authenticate your machine by running dotenv-vault login."]],["Click log in","click-log-in",["On the next screen, follow the login process and click 'Log in'."]],["View .env.me file (optional)","view-env-me-file-optional",["You now have a .env.me file in the root of your project. The .env.me file uniquely authorizes you to access a project's shared .env file. You can think of it like your unique SSH key at GitHub.","Run ls -al to view it."]],["Run dotenv-vault push","run-dotenv-vault-push",["Return one last time to terminal and run dotenv-vault push.","This will securely push your .env file to dotenv-vault. Each time you change your .env file, run dotenv-vault push.","Congratulations \uD83C\uDF89, you just pushed (and secured) your first .env file in dotenv-vault.","ProTip: For a list of all available commands, run npx dotenv-vault help."]],["Run dotenv-vault open (bonus)","run-dotenv-vault-open-bonus",["Let's check out the UI. Run dotenv-vault open.","That's it! Thanks for using dotenv-vault."]]]},{url:"/docs/tutorials/teammates",sections:[["Adding Teammates",null,[]],["Run dotenv-vault open","run-dotenv-vault-open",["Open terminal, enter your project's root directory (where your .env.vault file is), and run dotenv-vault open.","FYI: Not a developer? You can navigate to this page by visiting ui.dotenv.org."]],["Click Team Dropdown","click-team-dropdown",["Click the 'Team' dropdown button and then click 'Manage access'."]],["Click Add Teammate","click-add-teammate",["On the next page, click 'Add Teammate'."]],["Enter Teammate's Email Address","enter-teammates-email-address",["Enter your teammate's email address and click 'Add teammate'."]],["Tell Your Teammate to Check Their Email","tell-your-teammate-to-check-their-email",["They will receive an email with instructions to run dotenv-vault pull. They can also choose to log in."]],["Teammate: Run dotenv-vault login","teammate-run-dotenv-vault-login",["Your teammate visits their terminal, enters the project directory (which they've already git-cloned via a service like GitHub or GitLab), and runs dotenv-vault login."]],["Teammate: Click Login","teammate-click-login",["On the next screen, your teammate should follow the login process and click 'Log in'."]],["Teammate: View .env.me file (optional)","teammate-view-env-me-file-optional",["Your teammate now has their own .env.me file (on their machine only) in the root of the project. The .env.me file uniquely authorizes them to access the project's shared .env file. Think of it like a unique SSH key at GitHub.","Run ls -al to view it."]],["Teammate: Run dotenv-vault pull","teammate-run-dotenv-vault-pull",["Your teammate returns to their terminal and runs dotenv-vault pull."]],["Teammate: Run dotenv-vault push (optional)","teammate-run-dotenv-vault-push-optional",["Your teammate can edit the .env file and push changes with dotenv-vault push."]],["You: Run dotenv-vault pull (optional)","you-run-dotenv-vault-pull-optional",["Pull the changes your teammate made with dotenv-vault pull.","That's it! Thanks for using dotenv-vault with your teammates and friends."]]]},{url:"/docs/frameworks/angular/vercel",sections:[["Deploy an Angular App to Vercel",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an Angular application.","This will create a handful of files.","Add @ngx-env/builder so we can get process.env support in Angular.","Generate the environment files (for Angular 16 and greater).","Edit src/app/app.component.ts to include the environment variable NG_APP_HELLO.","Change src/app/app.component.html to a simple Hello {{ NG_APP_HELLO }}.","Add .vercelignore file.","Commit that to code and deploy it to Vercel.","Once deployed, your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Preload dotenv","preload-dotenv",["Install dotenv.","Create a .env file in the root of your project.","Preload Angular scripts using dotenv. This will inject environment variables ahead of Angular.","Try running it locally.","It will say 'Hello World'.","Great! process.env now has the keys and values you defined in your .env file.","That covers local simulation of production. Let's solve for the real production environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Vercel using the CLI.","Or use Vercel's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/frameworks/astro/netlify",sections:[["Deploy an Astro.js App to Netlify",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Generate an astro.js application. When prompted, choose the Empty project option.","This will create a handful of files.","Edit src/pages/index.astro to include process.env.PUBLIC_HELLO.","Add the astro netlify adapter.","Add netlify.toml.","Commit that to code and deploy it to Netlify.","Once deployed, your app will say Hello . as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","Preface your npm package.json scripts with dotenv preloading.","Try running it locally.","Visit localhost:3000","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Netlify using the CLI.","Or use Netlify's UI."]],["Deploy","deploy",["Commit those changes safely to code and redeploy to netlify.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/express/docker-compose",sections:[["Deploy an Express.js App with Docker Compose",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install express.","Create an index.js file with the web server code.","Add a Dockerfile.","Create your docker-compose.yml file.","Create your .dockerignore file.","Commit all that to code and run it with Docker Compose.","Once running, your app will say Hello undefined at localhost:3000 as it doesn’t have a way to access the environment variable yet. Let’s do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","As early as possible in your application, import and configure dotenv.","Next, tie the .env.vault file to our docker-compose file."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY for Docker Compose up.","ProTip: If docker-compose seems cached on old code it probably is. Run docker-compose build --no-cache to rebuild it.","That's it! On up, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see Loading env from encrypted .env.vault in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/express/fly",sections:[["Deploy an Express.js App to Fly.io",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install express.","Create an index.js file with the web server code.","Add a start script to the package.json file.","Commit that to code and deploy it to Fly.","Once deployed, your app will say Hello undefined as it doesn't have a way to access the environment variable yet. Let's do that next.",'Fly.io bug: While writing this guide we ran into the error "failed to fetch an image or build from source: error building: ... node:20.4.0-slim: docker.io/library/node:20.4.0-slim: not found". If you also experience this set NODE_VERSION=18.16.1 in your Dockerfile and redeploy.']],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","It should say Hello World.","Great! process.env now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Fly.io."]],["Deploy","deploy",["Commit those changes safely to code and deploy again.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just-in-time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/express/google-cloud-build",sections:[["CI/CD in Express.js with Google Cloud Build",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install express.","Create an index.js file with the web server code.","Add a Procfile to run your app on Heroku.","Commit that to code and push it to Heroku.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","It should say Hello World.","Great! process.env now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/express/heroku",sections:[["Deploy an Express.js App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install express.","Create an index.js file with the web server code.","Add a Procfile to run your app on Heroku.","Commit that to code and push it to Heroku.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","It should say Hello World.","Great! process.env now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/express/vercel",sections:[["Deploy an Express.js App to Vercel",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install express.","Create an index.js file with the web server code.","Add vercel.json file to run your app on Vercel.","Add .vercelignore file.","Commit that to code and deploy it to Vercel.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Vercel using the CLI.","Or use Vercel's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/frameworks/fastapi/heroku",sections:[["Deploy a FastAPI App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install fastapi, uvicorn, and gunicorn.","Create a main.py file with the web server code.","Add a Procfile to run your app on Heroku.","Create runtime.txt.","Freeze your requirements.txt.","Set up your .gitignore file.","Commit that to code and push it to Heroku.","Once deployed, your app will say { \"Hello\": null } as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install python-dotenv-vault","install-python-dotenv-vault",["Install python-dotenv-vault.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv-vault.","Try running it locally.",'It should say { "Hello": "World" }.',"Great! os.environ now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","You'll know things worked correctly when you see Loading env from encrypted .env.vault in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/flask/heroku",sections:[["Deploy a Flask App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install flask and gunicorn.","Create an index.py file with the web server code.","Create your wsgi.py file.","Add a Procfile to run your app on Heroku.","Create runtime.txt.","Freeze your requirements.txt.","Set up your .gitignore file.","Commit that to code and push it to Heroku.","Once deployed, your app will say 'Hello None' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install python-dotenv-vault","install-python-dotenv-vault",["Install python-dotenv-vault.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv-vault.","Try running it locally.","It should say Hello World.","Great! os.environ now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","You'll know things worked correctly when you see Loading env from encrypted .env.vault in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/gatsby/gatsby-edge",sections:[["Deploy a Gatsby.js App to Gatsby Edge Network",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Generate a gatsby.js application.","This will create a handful of files.","Install the latest dotenv. This is important because the Gatsby framework is currently using an old version of dotenv without .env.vault support.","Edit src/pages/index.js to the following.","Require dotenv at the top of gatsby-config.js.","Create .env file.","Run Gatsby.","Visit localhost:8000","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Test production DOTENV_KEY locally using the CLI.","Next set up your site on Gatsby Edge and then set the DOTENV_KEY as an environment variable.","Gatsby has an easy to follow tutorial for deploying to their edge network."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! When the build runs, your .env.vault file will be decrypted and its production secrets injected as environment variables – just-in-time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality.","If successful you'll see the message Loading env from encrypted .env.vault in your Gatsby Edge Network logs."]]]},{url:"/docs/frameworks/laravel/heroku",sections:[["Deploy a Laravel App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install Laravel and create a new Laravel project.","Add a Procfile to run your Laravel app.","Edit resources/views/welcome.blade.php.","Create your project on Heroku.","Generate a Laravel APP_KEY and set it on Heroku.","Commit everything to code and push it to Heroku.","Once deployed, your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv-vault-laravel","install-dotenv-vault-laravel",["Require dotenv-vault-laravel in your composer.json file.","Add HELLO=World to the bottom of your .env file.","Try running it locally.","It should say Hello World.","Great! ENV now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing .env files","Use the compare environments feature to copy Laravel's development values to production. (Additionally, modify any production values as needed.)","Next, modify HELLO to production.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","You'll know things worked correctly when you see Loading env from encrypted .env.vault in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/laravel/laravel-forge",sections:[["Deploy a Laravel App to Laravel Forge",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install Laravel and create a new Laravel project.","Edit resources/views/welcome.blade.php.","Commit that to code and push it up to GitHub.","Next, create your project on Laravel Forge."]],["Laravel Forge Setup","laravel-forge-setup",["Connect your provider (if you haven't already done so). Here, I am connecting Digital Ocean.","","Next, go to the servers page and click Create Server.","","Laravel Forge will bootstrap that server with everything it needs. Give it a few minutes to complete.","","Lastly, connect that server to your Laravel application on GitHub.","","Click Install Repository. Laravel Forge will install your application to your server. This takes a few minutes, and you might have to refresh the page.","Next, go to your application's dashboard and click Deploy Now.","","Once the deploy is finished, you can visit the ip address of your server. (I couldn't find this in Laravel Forge's dashboard. I had to go to Digital Ocean and view the droplet.)","","Your browser might warn you that the ip address is dangerous, but you can skip that and go straight to it.","","Your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv-vault-laravel","install-dotenv-vault-laravel",["Require dotenv-vault-laravel in your composer.json file.","Add HELLO=World to the bottom of your .env file.","Try running it locally.","It should say Hello World.","Great! ENV now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing .env files","Set all those secrets to match the secrets you have in Laravel Forge.","","Use the full edit mode feature to paste in all the contents at once.","Lastly, add the secret HELLO. Set the value to production.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Laravel Forge using the UI.","","You can remove all the other environment variables as those are now living in an encrypted fashion in your .env.vault file."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","","You'll know things worked correctly when you see Loading env from encrypted .env.vault in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard phpdotenv functionality.",""]]]},{url:"/docs/frameworks/nestjs/heroku",sections:[["Deploy a Nest.js App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install nestjs.","Edit src/app.service.ts. Replace Hello World with Hello ${process.env.HELLO}.","Modify src/main.ts to use a dynamic port.","Add a Procfile to run your app on Heroku.","Commit that to code and push it to Heroku.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install","install",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","It should say Hello World.","Great! process.env now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/nextjs/github-actions",sections:[["CI/CD in Next.js with GitHub Actions",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a Next.js application.","This will create a handful of files.","Edit pages/index.tsx to include process.env.NEXT_PUBLIC_HELLO.","Create .github/worksflows/ci.yml file.","Commit that to code and push to GitHub.","Once pushed, the GitHub actions build contents will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Preload dotenv","preload-dotenv",["Install dotenv.","Create a .env file in the root of your project.","Preload Next.js scripts using dotenv. This will inject environment variables ahead of Next.js.","Try running it locally.","It will say 'Hello World'.","Great! process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure the CI environment secrets.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on GitHub Actions."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/nextjs/netlify",sections:[["Deploy a Next.js App to Netlify",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Generate a next.js application.","This will create a handful of files.","Edit pages/index.tsx to include process.env.NEXT_PUBLIC_HELLO.","Add netlify.toml.","Commit that to code and deploy it to Netlify.","Once deployed, your app will say Hello . as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","Preface your npm package.json scripts with dotenv preloading.","Try running it locally.","Visit localhost:3000","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Netlify using the CLI.","Or use Netlify's UI."]],["Deploy","deploy",["Commit those changes safely to code and redeploy to netlify.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/nextjs/vercel",sections:[["Deploy a Next.js App to Vercel",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Generate a next.js application.","This will create a handful of files.","Edit pages/index.tsx to include process.env.NEXT_PUBLIC_HELLO.","Add .vercelignore file.","Commit that to code and deploy to Vercel.","Once deployed, your app will say Hello . as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Preload dotenv","preload-dotenv",["Install dotenv.","Create a .env file in the root of your project.","Preface your npm package.json scripts with dotenv preloading.","Try running it locally.","Visit localhost:3000","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Vercel using the CLI.","Or use Vercel's UI."]],["Deploy","deploy",["Commit those changes safely to code and redeploy to Vercel.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/frameworks/nuxtjs/edgio",sections:[["Deploy a Nuxt.js App to Edgio",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a Nuxt.js application.","This will create a handful of files.","Edit app.vue to include HELLO.","Edit nuxt.config.ts to include runtimeConfig environment variables.","Prepare the app for Edgio.","Commit that to code and deploy it to Edgio.","Once deployed, your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in nuxt.config.ts require and load dotenv.","Try running it locally.","It will say 'Hello World'.","Great! process.env now has the keys and values you defined in your .env file.","That covers local simulation of production. Let's solve for the real production environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Edgio using the UI."]],["Deploy","deploy",["You'll have to delete your .env file now to make use of the .env.vault file with edgio and Nuxt. Otherwise, Nuxt prioritizes the .env file over everything.","Commit those changes safely to code and redeploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/nuxtjs/vercel",sections:[["Deploy a Nuxt.js App to Vercel",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a Nuxt.js application.","This will create a handful of files.","Edit app.vue to include HELLO.","Edit nuxt.config.ts to include runtimeConfig environment variables.","Commit that to code and deploy to Vercel.","Once deployed, your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in nuxt.config.ts require and load dotenv.","Try running it locally.","It will say 'Hello World'.","Great! process.env now has the keys and values you defined in your .env file.","That covers local simulation of production. Let's solve for the real production environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Vercel using the CLI.","Or use Vercel's UI."]],["Deploy","deploy",["You'll have to delete your .env file now to make use of the .env.vault file with Vercel and Nuxt. Otherwise, Nuxt prioritizes the .env file over everything.","Commit those changes safely to code and redeploy to Vercel.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/frameworks/pm2/heroku",sections:[["Deploy a PM2 App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Generate an ecosystem.config.js file.","Modify it to your needs. Something like this.","Your index.js file should look something like this.","Add pm2 as a dependency.","In your package.json, modify your start script.","Commit that to code and push it to Heroku.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Visit localhost:3000","It should say Hello World.","Great! process.env now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/rails/fly",sections:[["Deploy a Rails App to Fly.io",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install Rails.","Create a new Rails project.","Edit config/routes.rb and set root to www#index.","Create app/controllers/www_controller.rb.","Create app/views/www/index.html.erb.","Commit that to code and push it to Fly.io.","Once deployed, your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv-vault-rails","install-dotenv-vault-rails",["Add dotenv-vault-rails to the top of your Gemfile.","Create a .env file in the root of your project.","Try running it locally.","It should say Hello World.","Great! ENV now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Fly.io."]],["Deploy","deploy",["Commit those changes safely to code and deploy again.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","You'll know things worked correctly when you see Loading env from encrypted .env.vault in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/rails/heroku",sections:[["Deploy a Rails App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install Rails.","Create a new Rails project.","Edit config/routes.rb and set root to www#index.","Create app/controllers/www_controller.rb.","Create app/views/www/index.html.erb.","Commit that to code and push it to Heroku.","Once deployed, your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv-vault-rails","install-dotenv-vault-rails",["Add dotenv-vault-rails to the top of your Gemfile.","Create a .env file in the root of your project.","Try running it locally.","It should say Hello World.","Great! ENV now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","You'll know things worked correctly when you see Loading env from encrypted .env.vault in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/rails/kamal",sections:[["Deploy a Rails App with Kamal",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install Rails.","Create a new Rails project.","Edit config/routes.rb and set root to www#index.","Create app/controllers/www_controller.rb.","Create app/views/www/index.html.erb.","Commit those changes safely to code. Next, we'll set up Kamal."]],["Set up Kamal","set-up-kamal",["Install Kamal.","Initialize Kamal.","Edit your config/deploy.yml file.","Make sure you can ssh to your server.","Then modify your .env file, setting your KAMAL_REGISTRY_PASSWORD to your docker registry's password and your RAILS_MASTER_KEY. Find your RAILS_MASTER_KEY at config/master.key.","Turn off force_ssl.","Then run kamal setup.","This will bootstrap your server with everything it needs - docker and your Rails application.","Visit your server's ip address.","Your app will say 'Hello .' at your_server_ip as it doesn't have a way to access the environment variable yet. Let’s do that next."]],["Install dotenv-vault-rails","install-dotenv-vault-rails",["Add dotenv-vault-rails to the top of your Gemfile.","Add HELLO=World to your .env file.","Try running it locally.","It should say Hello World.","Great! ENV now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY for Kamal's .env file.","And DOTENV_KEY to Kamal's config/deploy.yml env.secret section.","Push those ENV changes to Kamal."]],["Deploy Kamal","deploy-kamal",["Commit those changes safely to code and deploy with Kamal.","That's it! On build and deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/frameworks/remix/github-actions",sections:[["CI/CD in Remix.js with GitHub Actions",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a Remix.js application.","This will create a handful of files.","Edit app/routes/_index.tsx to include process.env.HELLO using a Remix loader.","Create .github/worksflows/ci.yml file.","Commit that to code and push to GitHub.","Once pushed, the GitHub Actions build contents will say Hello . as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Preload dotenv","preload-dotenv",["Install dotenv.","Create a .env file in the root of your project.","Preload Remix.js scripts using dotenv. This will inject environment variables ahead of Remix.js.","Try running it locally.","It will say 'Hello World'.","Great! process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure the CI environment secrets.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on GitHub Actions."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/remix/vercel",sections:[["Deploy a Remix.js App to Vercel",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a Remix.js application.","This will create a handful of files.","Edit app/routes/_index.tsx to include process.env.HELLO using a Remix loader.","Add .vercelignore file.","Commit that to code and deploy it to Vercel.","Once deployed, your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Preload dotenv","preload-dotenv",["Install dotenv.","Create a .env file in the root of your project.","Preload Remix.js scripts using dotenv. This will inject environment variables ahead of Remix.js.","Try running it locally.","It will say 'Hello World'.","Great! process.env now has the keys and values you defined in your .env file.","That covers local simulation of production. Let's solve for the real production environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Vercel using the CLI.","Or use Vercel's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/frameworks/rocket-rs/heroku",sections:[["Deploy a Rocket App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install rocket.","Rocket uses advanced Rust features so install the nightly version of Rust.","Modify src/main.rs file with the web server code.","Add a Procfile to run your app on Heroku.","Create a rust-toolchain file to tell Heroku to run the nightly rust version.","Commit that to code, set the rust buildpack, and push it to Heroku.","Once deployed, your app will say Hello . as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv-vault","install-dotenv-vault",["Install dotenv-vault.","Create a .env file in the root of your project.","As early as possible in your main function, load dotenv.","Try running it locally.","It should say Hello World..","Great! process.env now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/serverless/aws-lambda",sections:[["Deploy a Serverless App to AWS Lambda",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a serverless project.","Here are the options I selected for this guide. Modify for your own needs.","Edit index.js to include process.env.HELLO.","Deploy that to the cloud.","Invoke your function.","It will respond with Hello undefined as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your function, import and configure dotenv.","Test that it is working by invoking your function locally.","It should say Hello World.","Great! process.env now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Edit your serverless.yml file to inject the DOTENV_KEY as a param.","Important, additionally, edit your serverless.yml file to ignore your .env* files excepting your .env.vault file.","When complete, your serverless.yml file should look something like this.","Using the DOTENV_KEY you fetched above, set it as param on the Serverless dashboard.","Deploy to the cloud again.","Now invoke your function.","That's it! On invocation, your .env.vault file will be decrypted and its production secrets injected as environment variables – just-in-time."]]]},{url:"/docs/frameworks/sinatra/heroku",sections:[["Deploy a Sinatra App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install sinatra and rackup to your Gemfile.","Your Gemfile should look something like this.","Create an index.rb file with the web server code.","Create your config.ru file.","Add a Procfile to run your app on Heroku.","Commit that to code and push it to Heroku.","Once deployed, your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv-vault","install-dotenv-vault",["Install dotenv-vault.","Create a .env file in the root of your project.","As early as possible in your application, require and load dotenv-vault.","Try running it locally.","It should say Hello World.","Great! ENV now has the keys and values you defined in your .env file. That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables‚ just in time.","If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/frameworks/svelte-kit/vercel",sections:[["Deploy a SvelteKit App to Vercel",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a SvelteKit application.","Choose Skeleton project from the options. This will create a handful of files.","Edit src/routes/+page.svelte to include process.env.PUBLIC_HELLO.","Add .vercelignore file.","Commit that to code and deploy it to Vercel.","Once deployed, your app will say 'Hello undefined.' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Preload dotenv","preload-dotenv",["Install dotenv.","Create a .env file in the root of your project.","Preload SvelteKit scripts (which use vite) with dotenv. This will inject environment variables ahead of SvelteKit.","Try running it locally.","It will say 'Hello World.'.","Great! process.env now has the keys and values you defined in your .env file.","That covers local simulation of production. Let's solve for the real production environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Vercel using the CLI.","Or use Vercel's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/frameworks/turborepo/vercel",sections:[["Deploy a Turborepo App to Vercel",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a new monorepo.","This will create a handful of files and a couple workspaces (apps).","Edit apps/web/app/page.tsx to include process.env.NEXT_PUBLIC_HELLO and say 'Hello World'.","Declare the environment variable in turbo.json.","If you prefer to set an environment variable on a workspace only and not globally across your turborepo, you can do that with the pipeline env key.","Add .vercelignore file.","Commit that to code and deploy it to Vercel.","Your first deploy will likely fail because you need to add a couple custom configurations. Go to project settings and do the following.","Set Build & Development Settings > Framework Preset to Next.js and override the build command with cd ../.. && npm run build --filter=web.","Set the root directory to apps/web.","Deploy again.","Once deployed, your app will say 'Hello .' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv-cli","install-dotenv-cli",["Install dotenv-cli.","We are installing from motdotla/dotenv-cli temporarily. Once entropitor/dotenv-cli upgrades to dotenv@16.3.x we will recommend the simpler npm install dotenv-cli --save command.","Create a .env file in the root of your project.","Adjust your package.json scripts to inject the environment variables into the turbo command.","See more about using environment variables with turborepo.","Try running it locally.","Visit localhost:3002","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Vercel using the CLI.","Or use Vercel's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/frameworks/vite/vercel",sections:[["Deploy a Vite App to Vercel",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a Vite application.","This will create a handful of files.","Edit src/main.ts to include to a simple Hello ${process.env.HELLO}..","Add .vercelignore file.","Commit that to code and deploy it to Vercel.","Once deployed, your app will say 'Hello undefined.' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Preload dotenv","preload-dotenv",["Install dotenv.","Create a .env file in the root of your project.","Preload Vite.js scripts using dotenv. This will inject environment variables ahead of Vite.js.","Try running it locally.","It will say 'Hello World'.","Great! process.env now has the keys and values you defined in your .env file.","That covers local simulation of production. Let's solve for the real production environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Vercel using the CLI.","Or use Vercel's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/integrations/github-actions/nextjs",sections:[["Redirecting",null,["Click here if you are not redirected."]]]},{url:"/docs/integrations/gitlab/ci-quickstart",sections:[["Redirecting",null,["Click here if you are not redirected."]]]},{url:"/docs/integrations/supabase/nodejs",sections:[["Redirecting",null,["Click here if you are not redirected."]]]},{url:"/docs/integrations/vercel/vite",sections:[["Redirecting",null,["Click here if you are not redirected."]]]},{url:"/docs/languages/nodejs/aws-beanstalk",sections:[["CI/CD in Node.js with AWS Beanstalk",null,[]],["Initial setup","initial-setup",["Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file.","Then create a buildspec.yml file.","Once ready, proceed by creating a basic pipeline setup using AWS CodePipeline and connect it with your AWS Beanstalk project accordingly."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on CodePipeline."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/aws-lambda",sections:[["Deploy a Node.js App to AWS Lambda",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an aws-lambda project using node-lambda.","This will create a handful of files.","Create an index.js file that includes process.env.HELLO.","Visit your IAM Dashboard and click Users > Add user. Enter node-lambda for the username and click 'Next'.","On the next screen, attach a policy directly, search for AWSLambda_FullAccess, and select it. Click 'Next'.","Finish creating that user and then on the user's page, generate an access key.","Grab the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from the UI and paste into your .env file.","Deploy your lambda code.","Test invocation of your function.","It will respond with Hello undefined as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","As early as possible in your function, import and configure dotenv.","Next let's build the .env.vault file."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Using the DOTENV_KEY you fetched above, set it as an environment variable on the AWS Lambda dashboard.","Deploy it again.","Return to the AWS Console and invoke your function again.","It should say Hello production.","That's it! On invocation, your .env.vault file will be decrypted and its production secrets injected as environment variables – just-in-time."]]]},{url:"/docs/languages/nodejs/bitbucket",sections:[["CI/CD in Node.js with Bitbucket",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file.","Create a bitbucket-pipelines.yml file.","Commit that to code and push to Bitbucket.","Once pushed, the Bitbucket pipeline build will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on Bitbucket."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/buddy",sections:[["CI/CD in Node.js with Buddy",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file.","Create a buddy.yml file.","Commit that to code and push to Buddy.","Once pushed, the Buddy pipeline build will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on Buddy."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/circleci",sections:[["CI/CD in Node.js with CircleCI",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file.","Create a .circleci/config.yml file.","Run npm install to include the package-lock.json file.","Commit all that to code and push to GitHub. Then connect your GitHub repo to CircleCI.","Once pushed, the CircleCI build will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on CircleCI."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","It will say Hello ci.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/cloud66",sections:[["Deploy a Node.js App with Cloud66",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an index.js file, if you haven't already done so.","Add an empty package.json file (needed for the Docker build).","Add a Dockerfile.","Commit that to code, push it up to GitHub, and connect it to your Cloud66 account.","On the next screen, make sure to set the local port to 3000, http to 80, https to 443.","Confirm everything looks good and click 'Start Deployment'.","Visit your app.","Once deployed, your app will say 'Hello undefined' as it doesn’t have a way to access the environment variable yet. Let’s do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers the local development build. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Cloud66."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/dagger",sections:[["CI/CD in Node.js with Dagger",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install the Dagger Node SDK.","Create a ci/index.mjs file.","Run the pipeline.","Docker is required to be running on your machine for Dagger to work.","Once run, the pipeline build will say 'Hello undefined.' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your ci pipeline, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY for Dagger.","The result will be:","That's it! Your .env.vault file is decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/digital-ocean",sections:[["Deploy a Node.js App to Digital Ocean",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an index.js file, if you haven't already done so.","Commit that to code and deploy it to Digital Ocean.","Fork in the road! Deploying to Digital Ocean takes more steps than we want to document here. Follow their guide to deploying a Node.js app to Digital Ocean and then return to this page.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Digital Ocean."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/docker",sections:[["Deploy a Node.js App with Docker",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an index.js file, if you haven't already done so.","Add package.json file.","Add a Dockerfile.","Commit that to code and build it locally with Docker.","Once built, your app will say 'Hello undefined' at localhost:3000 as it doesn’t have a way to access the environment variable yet. Let’s do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try rebuilding it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers the local development build. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY for Docker run.","The important part here is the -e flag. See docker environment variables for more information."]],["Run Docker","run-docker",["Commit those changes safely to code and run on Docker.","That's it! On build and run, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/fly",sections:[["Deploy a Node.js App to Fly.io",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an index.js file with your web server code.","Create a package.json file.","Commit that to code and deploy it to Fly.",'Fly.io bug: While writing this guide we ran into the error "failed to fetch an image or build from source: error building: ... node:20.4.0-slim: docker.io/library/node:20.4.0-slim: not found". If you also experience this set NODE_VERSION=18.16.1 in your Dockerfile and redeploy.',"Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","CLI","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Fly.io."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/github-actions",sections:[["CI/CD in Node.js with GitHub Actions",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file.","Create a .github/workflows/ci.yml file.","Commit that to code and push to GitHub.","Once pushed, the GitHub actions build will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on GitHub Actions."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/gitlab-ci",sections:[["CI/CD in Node.js with Gitlab CI",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file.","Create a .gitlab-ci.yml file.","Commit that to code and push to Gitlab.","Once pushed, the Gitlab CI build will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on Gitlab."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/google-cloud-build",sections:[["CI/CD in Node.js with Google Cloud Build",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Install the gcloud cli.","Log in to gcloud.","Set your project. You can look this up on the Google Cloud Dashboard.","Initialize your project with Google Cloud.","Create a repo.","Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file.","Create a cloudbuild.yml file.","Commit that to code and push to Google Cloud.","Once pushed, the Google Cloud Build build will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next.","There were more steps to fully connect up Google Cloud Build that we did not discuss above. It's a bit of a mess to be honest. If you can we would recommend GitHub Actions over it. But once you get Google Cloud Build going it runs quite well."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on Google Cloud Build."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/heroku",sections:[["Deploy a Node.js App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Add a Procfile to run your Node.js app.","Your index.js file should look something like this.","Add a package.json file.","Commit that to code and push it to Heroku.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/jenkins",sections:[["CI/CD in Node.js with Jenkins",null,[]],["Initial setup","initial-setup",["Create a Jenkinsfile file.","If you're on Windows, replace the sh command with powershell.","Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file.","Push it up to Jenkins."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on Jenkins.","There are multiple optional ways to do this with Jenkins - as part of a build step, as a node property, or as a global setting. Choose what works best for your situation.","Applying the decryption key to a build step will make it active only during that particular step, during node activity when set as a node property, and for every action as a global setting.","You can set it in a build step via the Blue Ocean interface, or the Jenkinsfile, in a node property via Dashboard/Manage Jenkins/Nodes/NODE_NAME, and in the global settings via Dashboard/Manage Jenkins/Configure System.","Once you’ve chosen a preferred location, put DOTENV_KEY as the key and save the decryption key you obtained earlier for the value field."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/northflank",sections:[["Deploy a Node.js App to Northflank",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an index.js file, if you haven't already done so.","Add a Dockerfile.","Create your .dockerignore file.","Create an empty package.json file.","Commit all that to code and push it to GitHub. Then create a new project on Northflank that connects to that GitHub repository.","Choose Dockerfile for your build options.","Northflank will deploy your application to code.run.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Northflank."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/pulumi",sections:[["CI/CD in Node.js with Pulumi",null,["We'll use Google Cloud with Pulumi for this guide. Pulumi works with multiple infrastructure platforms."]],["Initial setup","initial-setup",["Create a pulumi.yml file.","Create a pulumi.yml file.","Also create a cloudbuild.yml file.","Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file.","Install the pulumi gcp plugins.","Deploy it all with Pulumi."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on Google Cloud Build."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/railway",sections:[["Deploy a Node.js App to Railway",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an index.js file, if you haven't already done so.","Add an empty package.json.","Commit that to code and deploy it to Railway.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Railway."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/render",sections:[["Deploy a Node.js App to Render",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an index.js file, if you haven't already done so.","Create a package.json file.","Commit that to code and deploy to Render.","Fork in the road! Deploying to Render takes more steps than we want to document here. Follow their guide to deploying a Node.js Express app to Render and then return to this page.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Render."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/travis-ci",sections:[["CI/CD in Node.js with Travis CI",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a build.js file. It's a very simple build script that outputs 'Hello World'.","Create a package.json file with a test script. Travis expects to be able to run npm test by default.","Create a .travis.yml file.","Commit that to code and push to GitHub. Then connect Travis CI","Once pushed, the Travis CI build will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on Travis CI."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/nodejs/vercel",sections:[["Deploy a Node.js App to Vercel",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create an index.js file, if you haven't already done so.","Add vercel.json file.","Add .vercelignore file.","Commit that to code and deploy it to Vercel.","Once deployed, your app will say 'Hello undefined' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv","install-dotenv",["Install dotenv.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv.","Try running it locally.","Perfect. process.env now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Vercel using the CLI.","Or use Vercel's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time."]]]},{url:"/docs/languages/php/heroku",sections:[["Deploy a PHP App to Heroku",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Add a Procfile to run your PHP app.","Your index.php file should look something like this.","Commit that to code and push it to Heroku.","Once deployed, your app will say 'Hello ' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install phpdotenv-vault","install-phpdotenv-vault",["Install phpdotenv-vault.","Create a .env file in the root of your project.","As early as possible in your application, load dotenv.","Try running it locally.","Perfect. $_SERVER now has the keys and values you defined in your .env file.","That covers local development. Let's solve for production next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your production secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your production DOTENV_KEY.","Set DOTENV_KEY on Heroku using the CLI.","Or use Heroku's UI."]],["Deploy","deploy",["Commit those changes safely to code and deploy.","That's it! On deploy, your .env.vault file will be decrypted and its production secrets injected as environment variables – just in time.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]},{url:"/docs/languages/ruby/circleci",sections:[["CI/CD in Ruby with CircleCI",null,["Find a complete code example on GitHub for this guide."]],["Initial setup","initial-setup",["Create a build.rb file. It's a very simple build script that outputs 'Hello World'.","Create a Gemfile.","Run bundle install to generate the Gemfile.lock.","Create a .circleci/config.yml file.","Commit all that to code and push to GitHub. Then connect your GitHub repo to CircleCI.","Once pushed, the CircleCI build will say 'Hello ' as it doesn't have a way to access the environment variable yet. Let's do that next."]],["Install dotenv-vault","install-dotenv-vault",["Install dotenv-vault.","Create a .env file in the root of your project.","As early as possible in your application, import and configure dotenv-vault along with bundler/setup.","Try running it locally.","Perfect. ENV now has the keys and values you defined in your .env file.","That covers local simulation of the CI. Let's solve for the real CI environment next."]],["Build .env.vault","build-env-vault",["Push your latest .env file changes and edit your CI secrets. Learn more about syncing","Use the UI to configure those secrets per environment.","Then build your encrypted .env.vault file.","Its contents should look something like this."]],["Set DOTENV_KEY","set-dotenv-key",["Fetch your CI DOTENV_KEY.","Set DOTENV_KEY on CircleCI."]],["Build CI","build-ci",["Commit those changes safely to code and rerun the build.","That's it! On rerun, your .env.vault file will be decrypted and its CI secrets injected as environment variables – just in time. It will say Hello ci.","You'll know things worked correctly when you see 'Loading env from encrypted .env.vault' in your logs. If a DOTENV_KEY is not set (for example when developing on your local machine) it will fall back to standard dotenv functionality."]]]}])for(let[s,_,$]of i)j.add({url:o+(_?"#"+_:""),title:s,content:[s,...$].join("\n"),pageTitle:_?i[0][0]:void 0});function _(o){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=j.search(o,{...i,enrich:!0});return 0===s.length?[]:s[0].result.map(o=>({url:o.id,title:o.doc.title,pageTitle:o.doc.pageTitle}))}}}]);